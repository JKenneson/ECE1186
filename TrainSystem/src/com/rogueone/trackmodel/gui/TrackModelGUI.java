/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.rogueone.trackmodel.gui;

import com.rogueone.global.Global;
import com.rogueone.trackmodel.Beacon;
import com.rogueone.trackmodel.Block;
import com.rogueone.trackmodel.Line;
import com.rogueone.trackmodel.Section;
import com.rogueone.trackmodel.Station;
import com.rogueone.trackmodel.Switch;
import java.io.File;
import javax.swing.JFileChooser;
import com.rogueone.trackmodel.TrackModel;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kylemonto
 */
public class TrackModelGUI extends javax.swing.JPanel {
    
    private final TrackModel trackModel;
    private final FailureRenderer failureRenderer;
    private final PresenceRenderer presenceRenderer;
    private final LineRenderer lineRenderer;

    /** Creates new form TrackModelGUI */
    public TrackModelGUI(TrackModel tm) {
        trackModel = tm;
        initComponents();
        updateAll();
        lineSelectionComboBox.addItemListener(new LineChangeListener());
        sectionSelectionComboBox.addItemListener(new SectionChangeListener());
        blockSelectionComboBox.addItemListener(new BlockChangeListener());
        failureRenderer = new FailureRenderer();
        presenceRenderer = new PresenceRenderer();
        lineRenderer = new LineRenderer();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trackDataFileChooser = new javax.swing.JFileChooser();
        trackModelTabbedPane = new javax.swing.JTabbedPane();
        trackOverviewPanel = new javax.swing.JPanel();
        trackLayoutPanel = new javax.swing.JPanel();
        trackLayoutLabel = new javax.swing.JLabel();
        summaryPanel = new javax.swing.JPanel();
        summaryScrollPane = new javax.swing.JScrollPane();
        summaryTable = new javax.swing.JTable();
        trackConfigurationPanel = new javax.swing.JPanel();
        trackConfigurationLoadButton = new javax.swing.JButton();
        trackConfigurationResetButton = new javax.swing.JButton();
        trackDetailsPanel = new javax.swing.JPanel();
        trackDetailsSelectionPanel = new javax.swing.JPanel();
        lineSectionPanel = new javax.swing.JPanel();
        lineSelectionComboBox = new javax.swing.JComboBox<>();
        sectionSelectionPanel = new javax.swing.JPanel();
        sectionSelectionComboBox = new javax.swing.JComboBox<>();
        blockSelectionPanel = new javax.swing.JPanel();
        blockSelectionComboBox = new javax.swing.JComboBox<>();
        trackDetailsDetailsPanel = new javax.swing.JPanel();
        blockPanel = new javax.swing.JPanel();
        blockScrollPane = new javax.swing.JScrollPane();
        blockTable = new javax.swing.JTable();
        switchPanel = new javax.swing.JPanel();
        switchScrollPane = new javax.swing.JScrollPane();
        switchTable = new javax.swing.JTable();
        stationPanel = new javax.swing.JPanel();
        stationScrolPane = new javax.swing.JScrollPane();
        stationTable = new javax.swing.JTable();
        trackFailureModesPanel = new javax.swing.JPanel();
        brokenRailFailureButton = new javax.swing.JButton();
        trackCircuitFailureButton = new javax.swing.JButton();
        powerOutageFailureButton = new javax.swing.JButton();
        trackCircuitPanel = new javax.swing.JPanel();
        trackCircuitScrollPanel = new javax.swing.JScrollPane();
        trackCircuitTable = new javax.swing.JTable();
        beaconPanel = new javax.swing.JPanel();
        beaconScrollPane = new javax.swing.JScrollPane();
        beaconTable = new javax.swing.JTable();

        setMaximumSize(new java.awt.Dimension(1070, 720));
        setMinimumSize(new java.awt.Dimension(1070, 720));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(1040, 720));
        setVerifyInputWhenFocusTarget(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        trackLayoutPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Layout", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        trackLayoutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rogueone/images/layout_small.jpg"))); // NOI18N

        javax.swing.GroupLayout trackLayoutPanelLayout = new javax.swing.GroupLayout(trackLayoutPanel);
        trackLayoutPanel.setLayout(trackLayoutPanelLayout);
        trackLayoutPanelLayout.setHorizontalGroup(
            trackLayoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trackLayoutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trackLayoutLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        trackLayoutPanelLayout.setVerticalGroup(
            trackLayoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trackLayoutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trackLayoutLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        summaryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Summary", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        summaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Please load a track data file"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        summaryTable.setFocusable(false);
        summaryTable.setRowSelectionAllowed(false);
        summaryScrollPane.setViewportView(summaryTable);

        javax.swing.GroupLayout summaryPanelLayout = new javax.swing.GroupLayout(summaryPanel);
        summaryPanel.setLayout(summaryPanelLayout);
        summaryPanelLayout.setHorizontalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(summaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(summaryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                .addContainerGap())
        );
        summaryPanelLayout.setVerticalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(summaryScrollPane)
                .addContainerGap())
        );

        trackConfigurationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        trackConfigurationPanel.setLayout(new java.awt.GridLayout(1, 2, 1, 1));

        trackConfigurationLoadButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        trackConfigurationLoadButton.setText("Load Data File");
        trackConfigurationLoadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trackConfigurationLoadButtonMouseClicked(evt);
            }
        });
        trackConfigurationLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackConfigurationLoadButtonActionPerformed(evt);
            }
        });
        trackConfigurationPanel.add(trackConfigurationLoadButton);

        trackConfigurationResetButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        trackConfigurationResetButton.setText("Reset");
        trackConfigurationResetButton.setEnabled(false);
        trackConfigurationResetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trackConfigurationResetButtonMouseClicked(evt);
            }
        });
        trackConfigurationResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackConfigurationResetButtonActionPerformed(evt);
            }
        });
        trackConfigurationPanel.add(trackConfigurationResetButton);

        javax.swing.GroupLayout trackOverviewPanelLayout = new javax.swing.GroupLayout(trackOverviewPanel);
        trackOverviewPanel.setLayout(trackOverviewPanelLayout);
        trackOverviewPanelLayout.setHorizontalGroup(
            trackOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trackOverviewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trackOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(trackLayoutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trackConfigurationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(summaryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );
        trackOverviewPanelLayout.setVerticalGroup(
            trackOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trackOverviewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trackOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(summaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(trackOverviewPanelLayout.createSequentialGroup()
                        .addComponent(trackLayoutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trackConfigurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        trackModelTabbedPane.addTab("Track Overview", trackOverviewPanel);

        trackDetailsPanel.setMaximumSize(new java.awt.Dimension(1060, 710));
        trackDetailsPanel.setMinimumSize(new java.awt.Dimension(1060, 710));
        trackDetailsPanel.setPreferredSize(new java.awt.Dimension(1060, 710));

        trackDetailsSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 24))); // NOI18N
        trackDetailsSelectionPanel.setLayout(new java.awt.GridLayout(1, 3));

        lineSectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Line", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        lineSelectionComboBox.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        javax.swing.GroupLayout lineSectionPanelLayout = new javax.swing.GroupLayout(lineSectionPanel);
        lineSectionPanel.setLayout(lineSectionPanelLayout);
        lineSectionPanelLayout.setHorizontalGroup(
            lineSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lineSelectionComboBox, 0, 287, Short.MAX_VALUE)
                .addContainerGap())
        );
        lineSectionPanelLayout.setVerticalGroup(
            lineSectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lineSectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lineSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        trackDetailsSelectionPanel.add(lineSectionPanel);

        sectionSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Section", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        sectionSelectionComboBox.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        javax.swing.GroupLayout sectionSelectionPanelLayout = new javax.swing.GroupLayout(sectionSelectionPanel);
        sectionSelectionPanel.setLayout(sectionSelectionPanelLayout);
        sectionSelectionPanelLayout.setHorizontalGroup(
            sectionSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sectionSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sectionSelectionComboBox, 0, 287, Short.MAX_VALUE)
                .addContainerGap())
        );
        sectionSelectionPanelLayout.setVerticalGroup(
            sectionSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sectionSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sectionSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        trackDetailsSelectionPanel.add(sectionSelectionPanel);

        blockSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Block", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        blockSelectionComboBox.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N

        javax.swing.GroupLayout blockSelectionPanelLayout = new javax.swing.GroupLayout(blockSelectionPanel);
        blockSelectionPanel.setLayout(blockSelectionPanelLayout);
        blockSelectionPanelLayout.setHorizontalGroup(
            blockSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blockSelectionComboBox, 0, 287, Short.MAX_VALUE)
                .addContainerGap())
        );
        blockSelectionPanelLayout.setVerticalGroup(
            blockSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blockSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        trackDetailsSelectionPanel.add(blockSelectionPanel);

        trackDetailsDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 24))); // NOI18N
        trackDetailsDetailsPanel.setPreferredSize(new java.awt.Dimension(800, 828));
        trackDetailsDetailsPanel.setLayout(new java.awt.GridLayout(3, 1));

        blockPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Block", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        blockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Port A", "Port B", "Length", "Grade", "Speed Limit", "Elevation", "Cum Elevation", "Underground", "Crossing", "Beacon", "Occupied"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        blockTable.setRowHeight(30);
        blockScrollPane.setViewportView(blockTable);
        if (blockTable.getColumnModel().getColumnCount() > 0) {
            blockTable.getColumnModel().getColumn(0).setResizable(false);
            blockTable.getColumnModel().getColumn(1).setResizable(false);
            blockTable.getColumnModel().getColumn(2).setResizable(false);
            blockTable.getColumnModel().getColumn(3).setResizable(false);
            blockTable.getColumnModel().getColumn(4).setResizable(false);
            blockTable.getColumnModel().getColumn(5).setResizable(false);
            blockTable.getColumnModel().getColumn(6).setResizable(false);
            blockTable.getColumnModel().getColumn(7).setResizable(false);
            blockTable.getColumnModel().getColumn(8).setResizable(false);
            blockTable.getColumnModel().getColumn(10).setResizable(false);
            blockTable.getColumnModel().getColumn(11).setResizable(false);
        }

        javax.swing.GroupLayout blockPanelLayout = new javax.swing.GroupLayout(blockPanel);
        blockPanel.setLayout(blockPanelLayout);
        blockPanelLayout.setHorizontalGroup(
            blockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blockScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                .addContainerGap())
        );
        blockPanelLayout.setVerticalGroup(
            blockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blockPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(blockScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addContainerGap())
        );

        trackDetailsDetailsPanel.add(blockPanel);

        switchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Switch", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        switchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Port A", "Port B", "Port C"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        switchTable.setRowHeight(30);
        switchScrollPane.setViewportView(switchTable);
        if (switchTable.getColumnModel().getColumnCount() > 0) {
            switchTable.getColumnModel().getColumn(0).setResizable(false);
            switchTable.getColumnModel().getColumn(1).setResizable(false);
            switchTable.getColumnModel().getColumn(2).setResizable(false);
            switchTable.getColumnModel().getColumn(3).setResizable(false);
        }
        Action action = new AbstractAction()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                Block b = (Block) blockSelectionComboBox.getSelectedItem();
                if(b != null) {
                    TableCellListener tcl = (TableCellListener)e.getSource();
                    if (b.getSwitchID() != -1 && b.getPortB() != null) {
                        Switch sw = (Switch) b.getPortB();
                        if(((String)tcl.getNewValue()).equalsIgnoreCase("TRUE")) {
                            sw.setSwitch(true);
                        }
                        else if(((String)tcl.getNewValue()).equalsIgnoreCase("FALSE")) {
                            sw.setSwitch(false);
                        }
                    }
                }
            }
        };
        TableCellListener tcl = new TableCellListener(switchTable, action);

        javax.swing.GroupLayout switchPanelLayout = new javax.swing.GroupLayout(switchPanel);
        switchPanel.setLayout(switchPanelLayout);
        switchPanelLayout.setHorizontalGroup(
            switchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(switchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(switchScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                .addContainerGap())
        );
        switchPanelLayout.setVerticalGroup(
            switchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(switchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(switchScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addContainerGap())
        );

        trackDetailsDetailsPanel.add(switchPanel);

        stationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Station", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N

        stationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Block A", "Block B", "Right", "Left"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stationTable.setRowHeight(30);
        stationScrolPane.setViewportView(stationTable);
        if (stationTable.getColumnModel().getColumnCount() > 0) {
            stationTable.getColumnModel().getColumn(0).setResizable(false);
            stationTable.getColumnModel().getColumn(1).setResizable(false);
            stationTable.getColumnModel().getColumn(2).setResizable(false);
            stationTable.getColumnModel().getColumn(3).setResizable(false);
            stationTable.getColumnModel().getColumn(4).setResizable(false);
            stationTable.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout stationPanelLayout = new javax.swing.GroupLayout(stationPanel);
        stationPanel.setLayout(stationPanelLayout);
        stationPanelLayout.setHorizontalGroup(
            stationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stationScrolPane, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                .addContainerGap())
        );
        stationPanelLayout.setVerticalGroup(
            stationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stationScrolPane, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                .addContainerGap())
        );

        trackDetailsDetailsPanel.add(stationPanel);

        trackFailureModesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Failures", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 24))); // NOI18N
        trackFailureModesPanel.setLayout(new java.awt.GridLayout(1, 3, 4, 4));

        brokenRailFailureButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        brokenRailFailureButton.setText("Broken Rail");
        brokenRailFailureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brokenRailFailureButtonActionPerformed(evt);
            }
        });
        trackFailureModesPanel.add(brokenRailFailureButton);

        trackCircuitFailureButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        trackCircuitFailureButton.setText("Track Circuit");
        trackCircuitFailureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackCircuitFailureButtonActionPerformed(evt);
            }
        });
        trackFailureModesPanel.add(trackCircuitFailureButton);

        powerOutageFailureButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        powerOutageFailureButton.setText("Power  Out");
        powerOutageFailureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerOutageFailureButtonActionPerformed(evt);
            }
        });
        trackFailureModesPanel.add(powerOutageFailureButton);

        trackCircuitPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Track Circuit", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 24))); // NOI18N

        trackCircuitTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Speed", "Authority"
            }
        ));
        trackCircuitTable.setRowHeight(30);
        trackCircuitScrollPanel.setViewportView(trackCircuitTable);
        if (trackCircuitTable.getColumnModel().getColumnCount() > 0) {
            trackCircuitTable.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout trackCircuitPanelLayout = new javax.swing.GroupLayout(trackCircuitPanel);
        trackCircuitPanel.setLayout(trackCircuitPanelLayout);
        trackCircuitPanelLayout.setHorizontalGroup(
            trackCircuitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(trackCircuitScrollPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
        );
        trackCircuitPanelLayout.setVerticalGroup(
            trackCircuitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(trackCircuitScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        beaconPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Beacon", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 24))); // NOI18N

        beaconTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "Station", "Distance", "Side"
            }
        ));
        beaconTable.setRowHeight(30);
        beaconScrollPane.setViewportView(beaconTable);

        javax.swing.GroupLayout beaconPanelLayout = new javax.swing.GroupLayout(beaconPanel);
        beaconPanel.setLayout(beaconPanelLayout);
        beaconPanelLayout.setHorizontalGroup(
            beaconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beaconScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );
        beaconPanelLayout.setVerticalGroup(
            beaconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(beaconScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout trackDetailsPanelLayout = new javax.swing.GroupLayout(trackDetailsPanel);
        trackDetailsPanel.setLayout(trackDetailsPanelLayout);
        trackDetailsPanelLayout.setHorizontalGroup(
            trackDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trackDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trackDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(trackDetailsPanelLayout.createSequentialGroup()
                        .addComponent(trackFailureModesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(beaconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(trackCircuitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(trackDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(trackDetailsDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(trackDetailsSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1010, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        trackDetailsPanelLayout.setVerticalGroup(
            trackDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trackDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trackDetailsSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trackDetailsDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(trackDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(trackCircuitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trackFailureModesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(beaconPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        trackModelTabbedPane.addTab("Track Details", trackDetailsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(trackModelTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(trackModelTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void trackConfigurationLoadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trackConfigurationLoadButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_trackConfigurationLoadButtonMouseClicked

    private void trackConfigurationLoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackConfigurationLoadButtonActionPerformed

        trackDataFileChooser = new JFileChooser(new File("src/com/rogueone/assets/"));
        int returnVal = trackDataFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File trackDataFile = trackDataFileChooser.getSelectedFile();
            trackModel.reset();
            trackModel.parseDataFile(trackDataFile);
            updateAll();    
        }
        else if (returnVal == JFileChooser.CANCEL_OPTION) {
           System.out.println("File access cancelled by user.");
        }
        trackDataFileChooser.setVisible(true);
    }//GEN-LAST:event_trackConfigurationLoadButtonActionPerformed
    
    public void updateAll() {
        updateLineComboBox();
        updateSectionComboBox();
        updateBlockComboBox();
        updateSummaryPanel();
        updateDetailsPanel();
    }
    
    public void updateSummaryPanel() {
        ArrayList<Block> blocks = trackModel.getBlockArray();
        String blockColumnNames[] = { "Line", "Section", "Block", "Occupied", "Rail Fail", "Circuit Fail", "Power Fail" };
//        DefaultTableModel summaryModel = new DefaultTableModel(blockColumnNames, 0);
        Object[][] rows = new Object[blocks.size()][];
        int counter = 0;
        for (Block b : blocks) {
            String line =  b.getLine().getLineID() + "";
            if(line.equalsIgnoreCase("GREEN")) {
                line = "Green";
            }
            else if(line.equalsIgnoreCase("RED")) {
                line = "Red";
            }
            String section = b.getSection().getSectionID() + "";
            String ID = b.getID() + "";
            String presence = b.isOccupied() + "";
            if(presence.equalsIgnoreCase("TRUE")) {
                presence = "Yes";
            }
            else {
                presence = "No";
            }
            String failureBrokenRail = b.getFailureBrokenRail() + "";
            if(failureBrokenRail.equalsIgnoreCase("TRUE")) {
                failureBrokenRail = "Failure";
            }
            else {
                failureBrokenRail = "Ok";
            }
            String failureTrackCircuit = b.getFailureTrackCircuit() + "";
            if(failureTrackCircuit.equalsIgnoreCase("TRUE")) {
                failureTrackCircuit = "Failure";
            }
            else {
                failureTrackCircuit = "Ok";
            }
            String failurePowerOutage = b.getFailurePowerOutage() + "";
            if(failurePowerOutage.equalsIgnoreCase("TRUE")) {
                failurePowerOutage = "Failure";
            }
            else {
                failurePowerOutage = "Ok";
            }
            String blockRowData[] = {line, section, ID, presence, failureBrokenRail, failureTrackCircuit, failurePowerOutage};
       
            rows[counter++] = blockRowData;
//            summaryModel.addRow(blockRowData);
        }
        DefaultTableModel summaryModel = new DefaultTableModel(rows, blockColumnNames);
        summaryTable.setModel(summaryModel);

        summaryTable.getColumnModel().getColumn(0).setCellRenderer(lineRenderer);
        summaryTable.getColumnModel().getColumn(3).setCellRenderer(presenceRenderer);
        summaryTable.getColumnModel().getColumn(4).setCellRenderer(failureRenderer);
        summaryTable.getColumnModel().getColumn(5).setCellRenderer(failureRenderer);
        summaryTable.getColumnModel().getColumn(6).setCellRenderer(failureRenderer);
        
        summaryTable.repaint();
    }
    
    public void updateDetailsPanel() {
        Block b = (Block) blockSelectionComboBox.getSelectedItem();
        if(b != null) {
            updateDetailsPanel(b);
        } 
    }
    
    public void updateDetailsPanel(Block b) {
        if(b != null) {
            updateBlock(b);
            updateStation(b);
            updateSwitch(b);
            updateTrackCircuit(b);
            updateBeacon(b);
            updateFailures(b);
        }
    }
    
    public void updateBlock(Block b) { 
            String blockColumnNames[] = { "ID", "Port A", "Port B", "Length", "Grade", "Speed Limit", "Elevation", "Cum. Elevation", "Underground", "Crossing", "Occupied" };
            String crossingData = "No";
            if(b.getCrossing() != null) {
                if(b.getCrossing().getState()) {
                    crossingData = "Lowered";
                }
                else {
                    crossingData = "Rasied";
                }   
            }
            String blockRowData[] = { 
                    b.getID() + "", 
                    b.getPortA().getID() + "", 
                    b.getPortB().getID() + "", 
                    Global.decimalFormatter.format(b.getLength()) + " ft",
                    Global.gradeFormatter.format(b.getGrade()) + "%",
                    Global.decimalFormatter.format(b.getSpeedLimit()) + " mph",
                    Global.decimalFormatter.format(b.getElevation()) + " ft",
                    Global.decimalFormatter.format(b.getCumulativeElevation()) + " ft",
                    b.isUnderground() + "", 
                    crossingData,
                    b.isOccupied() + "" };
                NonEditableTableModel blockModel = new NonEditableTableModel(blockColumnNames);
                blockModel.addRow(blockRowData);
                blockTable.setModel(blockModel);
        }
        
        public void updateTrackCircuit(Block b) {
            String trackCircuitColumnNames[] = { "Speed", "Authority" };
                String trackCircuitRowData[] = { 
                    b.getTrackCircuit().speed + " mph", 
                    b.getTrackCircuit().authority + " ft" };
                NonEditableTableModel trackCircuitModel = new NonEditableTableModel(trackCircuitColumnNames);
                trackCircuitModel.addRow(trackCircuitRowData);
                trackCircuitTable.setModel(trackCircuitModel);
        }
        
        public void updateSwitch(Block b) {
            if (b.getSwitchID() != -1 && b.getPortB() != null) {
                    Switch switchBlock = (Switch) b.getPortB();
                    
                    String switchColumnNames[] = { "ID", "Static Block", "Default Dependent Block", "Alternate Dependent Block", "Activated" };
                    String switchRowData[] = { switchBlock.getID() + "", switchBlock.getPortA().getID() + "", switchBlock.getPortB().getID() + "", switchBlock.getPortC().getID() + "", switchBlock.isActivated() + "" };
                    NonEditableTableModel switchModel = new NonEditableTableModel(switchColumnNames);
                    switchModel.addRow(switchRowData);
                    switchTable.setModel(switchModel);
                }
                else {
                    String switchColumnNames[] = { "No switches to display" };
                    NonEditableTableModel switchModel = new NonEditableTableModel(switchColumnNames);
                    switchTable.setModel(switchModel);
                }
        }
        
        public void updateStation(Block b) {
            if (b.getStation() != null) {
                    Station station = (Station) b.getStation();
                    
                    String stationColumnNames[] = { "ID", "Name", "Block A", "Section A", "Block B", "Section B", "Temperature", "Heater", "Waiting" };
                    String heaterOn = "Off";
                    if(station.isHeaterOn()) {
                        heaterOn = "On";
                    }
                    String stationRowData[] = { 
                        station.getID() + "", 
                        station.getName(), 
                        station.getBlockA().getID() + "",
                        ((Block) station.getBlockA()).getSection().toString() + "", 
                        ((station.getBlockB() == null) ? "n/a" : station.getBlockB().getID() + ""), 
                        ((station.getBlockB() == null) ? "n/a" : ((Block) station.getBlockB()).getSection().toString() + ""),
                        station.getTemperature() + "",
                        heaterOn,
                        station.getWaitingPassengers() + ""};
                    NonEditableTableModel stationModel = new NonEditableTableModel(stationColumnNames);
                    stationModel.addRow(stationRowData);
                    stationTable.setModel(stationModel);
                }
                else {
                    String stationColumnNames[] = { "No stations to display" };
                    NonEditableTableModel stationModel = new NonEditableTableModel(stationColumnNames);
                    stationTable.setModel(stationModel);
                }
        }
        
        public void updateBeacon(Block b) {
            if (b.getBeacon() != null) {
                    Beacon beacon = (Beacon) b.getBeacon();
                    
                    String beaconColumnNames[] = { "ID", "Station", "Distance", "Side" };
                    String side = "Right";
                    if(beacon.isOnLeft()) {
                        side = "Left";
                    }
                    String beaconRowData[] = { 
                        beacon.getID() + "", 
                        beacon.getStation().getName(), 
                        Global.decimalFormatter.format(beacon.getDistance()) + " ft",
                        side};
                    NonEditableTableModel beaconModel = new NonEditableTableModel(beaconColumnNames);
                    beaconModel.addRow(beaconRowData);
                    beaconTable.setModel(beaconModel);
                }
                else {
                    String beaconColumnNames[] = { "No beacons to display" };
                    NonEditableTableModel beaconModel = new NonEditableTableModel(beaconColumnNames);
                    beaconTable.setModel(beaconModel);
                }
        }
        
        public void updateFailures(Block b) {
            if (b.getFailureTrackCircuit()) {
                    trackCircuitFailureButton.setBackground(Global.RED);
                }
                else {
                    trackCircuitFailureButton.setBackground(Global.GREEN);
                }
                if (b.getFailureBrokenRail()) {
                    brokenRailFailureButton.setBackground(Global.RED);
                }
                else {
                    brokenRailFailureButton.setBackground(Global.GREEN);
                }
                if (b.getFailurePowerOutage()) {
                    powerOutageFailureButton.setBackground(Global.RED);
                }
                else {
                    powerOutageFailureButton.setBackground(Global.GREEN);
                }
        }
    
    @SuppressWarnings("unchecked")
    private void updateLineComboBox() {
        lineSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(trackModel.getLineArray().toArray()));
    }
    
    @SuppressWarnings("unchecked")
    private void updateSectionComboBox() {
        sectionSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(((Line)(lineSelectionComboBox.getSelectedItem())).getSections().toArray()));
    }
    
    @SuppressWarnings("unchecked")
    private void updateBlockComboBox() {
        blockSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(((Section)(sectionSelectionComboBox.getSelectedItem())).getBlocks().toArray()));
    }
    
    @SuppressWarnings("unchecked")
    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void brokenRailFailureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brokenRailFailureButtonActionPerformed
        Block b = (Block) blockSelectionComboBox.getSelectedItem();
        b.setFailureBrokenRail(!b.getFailureBrokenRail());
        updateDetailsPanel();
        updateSummaryPanel();
    }//GEN-LAST:event_brokenRailFailureButtonActionPerformed

    private void trackCircuitFailureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackCircuitFailureButtonActionPerformed
        Block b = (Block) blockSelectionComboBox.getSelectedItem();
        b.setFailureTrackCircuit(!b.getFailureTrackCircuit());
        updateDetailsPanel();
        updateSummaryPanel();
    }//GEN-LAST:event_trackCircuitFailureButtonActionPerformed

    private void powerOutageFailureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerOutageFailureButtonActionPerformed
        Block b = (Block) blockSelectionComboBox.getSelectedItem();
        b.setFailurePowerOutage(!b.getFailurePowerOutage());
        updateDetailsPanel();
        updateSummaryPanel();
    }//GEN-LAST:event_powerOutageFailureButtonActionPerformed

    private void trackConfigurationResetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trackConfigurationResetButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_trackConfigurationResetButtonMouseClicked

    private void trackConfigurationResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackConfigurationResetButtonActionPerformed
        trackModel.reset();
        //updateAll();
        summaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Please load a track data file"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });  
    }//GEN-LAST:event_trackConfigurationResetButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel beaconPanel;
    private javax.swing.JScrollPane beaconScrollPane;
    private javax.swing.JTable beaconTable;
    private javax.swing.JPanel blockPanel;
    private javax.swing.JScrollPane blockScrollPane;
    private javax.swing.JComboBox<String> blockSelectionComboBox;
    private javax.swing.JPanel blockSelectionPanel;
    private javax.swing.JTable blockTable;
    private javax.swing.JButton brokenRailFailureButton;
    private javax.swing.JPanel lineSectionPanel;
    private javax.swing.JComboBox<String> lineSelectionComboBox;
    private javax.swing.JButton powerOutageFailureButton;
    private javax.swing.JComboBox<String> sectionSelectionComboBox;
    private javax.swing.JPanel sectionSelectionPanel;
    private javax.swing.JPanel stationPanel;
    private javax.swing.JScrollPane stationScrolPane;
    private javax.swing.JTable stationTable;
    private javax.swing.JPanel summaryPanel;
    private javax.swing.JScrollPane summaryScrollPane;
    private javax.swing.JTable summaryTable;
    private javax.swing.JPanel switchPanel;
    private javax.swing.JScrollPane switchScrollPane;
    private javax.swing.JTable switchTable;
    private javax.swing.JButton trackCircuitFailureButton;
    private javax.swing.JPanel trackCircuitPanel;
    private javax.swing.JScrollPane trackCircuitScrollPanel;
    private javax.swing.JTable trackCircuitTable;
    private javax.swing.JButton trackConfigurationLoadButton;
    private javax.swing.JPanel trackConfigurationPanel;
    private javax.swing.JButton trackConfigurationResetButton;
    private javax.swing.JFileChooser trackDataFileChooser;
    private javax.swing.JPanel trackDetailsDetailsPanel;
    private javax.swing.JPanel trackDetailsPanel;
    private javax.swing.JPanel trackDetailsSelectionPanel;
    private javax.swing.JPanel trackFailureModesPanel;
    private javax.swing.JLabel trackLayoutLabel;
    private javax.swing.JPanel trackLayoutPanel;
    private javax.swing.JTabbedPane trackModelTabbedPane;
    private javax.swing.JPanel trackOverviewPanel;
    // End of variables declaration//GEN-END:variables

    class LineChangeListener implements ItemListener{
        @Override
        public void itemStateChanged(ItemEvent event) {
           if (event.getStateChange() == ItemEvent.SELECTED) {
              updateSectionComboBox();
              updateBlockComboBox();
              updateDetailsPanel();
           }
        }       
    }
    
    class SectionChangeListener implements ItemListener{   
        @Override
        public void itemStateChanged(ItemEvent event) {
           if (event.getStateChange() == ItemEvent.SELECTED) {
              updateBlockComboBox();
              updateDetailsPanel();
           }
        }       
    }
    
    class BlockChangeListener implements ItemListener{
        @Override
        public void itemStateChanged(ItemEvent event) {
            if (event.getStateChange() == ItemEvent.SELECTED) {
                updateDetailsPanel();
            }
        }
    }

}
