/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rogueone.ctc.gui;
//import java.awt.*;
//import java.awt.event.*;
//import java.text.*;
//import java.util.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import com.rogueone.trainmodel.TrainModel;


public class CommandTrackControlGUI extends javax.swing.JPanel {
    
    int trainID;
    int iterativeID = 0;
    
    /**
     * Creates new form CommandTrackControlGUI
     */
    public CommandTrackControlGUI() {
        initComponents();
        InitializeGUIObject();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        MapPanel2 = new javax.swing.JPanel();
        MapImage2 = new javax.swing.JLabel();
        BrowserPanel2 = new javax.swing.JTabbedPane();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        TrainTable = new javax.swing.JTable();
        ChangeParametersButton3 = new javax.swing.JButton();
        jLabel88 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane6 = new javax.swing.JScrollPane();
        BlockTable = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        FailureTable = new javax.swing.JTable();
        InformationPanel2 = new javax.swing.JPanel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        InformationHeader2 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        TrainSpeedLabel2 = new javax.swing.JLabel();
        TrainAuthorityLabel2 = new javax.swing.JLabel();
        TrainNameField = new javax.swing.JTextField();
        CurrentLineField = new javax.swing.JTextField();
        CurrentBlockField = new javax.swing.JTextField();
        CurrentSectionField = new javax.swing.JTextField();
        AuthorityField = new javax.swing.JTextField();
        SpeedField = new javax.swing.JTextField();
        MaxCapacityField = new javax.swing.JTextField();
        CurrentCapacityField = new javax.swing.JTextField();
        jLabel76 = new javax.swing.JLabel();
        StatusField = new javax.swing.JTextField();
        AdditionalInfoPanel2 = new javax.swing.JPanel();
        TrainShutdownButton = new javax.swing.JButton();
        TrackShutdownButton = new javax.swing.JButton();
        DispatchControlPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        DispatchButton1 = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        DispatchLineBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        DispatchSpeedField = new javax.swing.JTextField();
        DispatchAuthorityField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        SystemInformationPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TimeField = new javax.swing.JTextField();
        RushHourField = new javax.swing.JTextField();
        ThroughputField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        SelectOperationMode2 = new javax.swing.JComboBox<>();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(900, 651));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        MapPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Map"));
        MapPanel2.setLayout(new java.awt.GridBagLayout());

        MapImage2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MapImage2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rogueone/images/layout_small.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 10;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.ipady = -8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        MapPanel2.add(MapImage2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(MapPanel2, gridBagConstraints);

        BrowserPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Browser"));

        jPanel19.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel19ComponentShown(evt);
            }
        });
        jPanel19.setLayout(new java.awt.GridBagLayout());

        TrainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Green",  new Integer(7), "D:2",  new Boolean(true)},
                {"Green",  new Integer(12), "G:3",  new Boolean(true)},
                {"Red",  new Integer(52), "G:9", null},
                {"Red",  new Integer(31), "M:1",  new Boolean(true)},
                {"Green",  new Integer(122), "M:10",  new Boolean(true)},
                {"Red",  new Integer(142), "Q:3",  new Boolean(true)},
                {"Red",  new Integer(103), "S:7",  new Boolean(true)},
                {"Green",  new Integer(98), "T:2",  new Boolean(true)},
                {"Green",  new Integer(91), "V:9",  new Boolean(true)},
                {"Red",  new Integer(120), "X:7", null},
                {"Green",  new Integer(5), "Z:2",  new Boolean(true)}
            },
            new String [] {
                "Line", "Train", "Position", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TrainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TrainTableMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(TrainTable);
        if (TrainTable.getColumnModel().getColumnCount() > 0) {
            TrainTable.getColumnModel().getColumn(0).setHeaderValue("Line");
            TrainTable.getColumnModel().getColumn(1).setHeaderValue("Train");
            TrainTable.getColumnModel().getColumn(2).setHeaderValue("Position");
            TrainTable.getColumnModel().getColumn(3).setHeaderValue("Status");
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 249;
        gridBagConstraints.ipady = 63;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel19.add(jScrollPane9, gridBagConstraints);

        ChangeParametersButton3.setText("CHANGE ");
        ChangeParametersButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeParametersButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = -4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 0);
        jPanel19.add(ChangeParametersButton3, gridBagConstraints);

        jLabel88.setText("Set Parameters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 0);
        jPanel19.add(jLabel88, gridBagConstraints);

        BrowserPanel2.addTab("Trains", jPanel19);

        jPanel20.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel20ComponentShown(evt);
            }
        });
        jPanel20.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.ipady = 123;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel20.add(jSeparator3, gridBagConstraints);

        BlockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Green", "A",  new Integer(1),  new Boolean(true)},
                {"Green", "A",  new Integer(2),  new Boolean(false)},
                {"Green", "A",  new Integer(3),  new Boolean(true)},
                {"Green", "B",  new Integer(4),  new Boolean(true)},
                {"Green", "B",  new Integer(5),  new Boolean(true)},
                {"Green", "B",  new Integer(6),  new Boolean(false)},
                {"Green", "C",  new Integer(7),  new Boolean(true)},
                {"Green", "C",  new Integer(8),  new Boolean(true)},
                {"Green", "C",  new Integer(9),  new Boolean(true)},
                {"Green", "C",  new Integer(10),  new Boolean(true)},
                {"Green", "C",  new Integer(11),  new Boolean(true)},
                {"Green", "C",  new Integer(12),  new Boolean(true)},
                {"Green", "D",  new Integer(13),  new Boolean(true)},
                {"Green", "D",  new Integer(14),  new Boolean(true)},
                {"Green", "D",  new Integer(15),  new Boolean(true)},
                {"Green", "D",  new Integer(16),  new Boolean(true)},
                {"Green", "E",  new Integer(17), null},
                {"Green", "E",  new Integer(18),  new Boolean(true)},
                {"Green", "E",  new Integer(19),  new Boolean(true)},
                {"Green", "E",  new Integer(20),  new Boolean(true)},
                {"Green", "F",  new Integer(21),  new Boolean(true)},
                {"Green", "F",  new Integer(22),  new Boolean(true)},
                {"Green", "F",  new Integer(23),  new Boolean(true)}
            },
            new String [] {
                "Line", "Section", "Block", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        BlockTable.setPreferredSize(new java.awt.Dimension(300, 176));
        BlockTable.setRequestFocusEnabled(false);
        BlockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BlockTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(BlockTable);
        if (BlockTable.getColumnModel().getColumnCount() > 0) {
            BlockTable.getColumnModel().getColumn(0).setResizable(false);
            BlockTable.getColumnModel().getColumn(1).setResizable(false);
            BlockTable.getColumnModel().getColumn(2).setResizable(false);
            BlockTable.getColumnModel().getColumn(3).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 249;
        gridBagConstraints.ipady = 63;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        jPanel20.add(jScrollPane6, gridBagConstraints);

        BrowserPanel2.addTab("Blocks", jPanel20);

        jPanel21.setLayout(new java.awt.GridBagLayout());

        FailureTable.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.select"));
        FailureTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Green", "A",  new Integer(2), "Power"},
                {"Green", "B",  new Integer(3), "Power"},
                {"Red", "F",  new Integer(2), "Broken Rail"}
            },
            new String [] {
                "Track", "Section", "Block", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FailureTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FailureTableMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(FailureTable);
        if (FailureTable.getColumnModel().getColumnCount() > 0) {
            FailureTable.getColumnModel().getColumn(0).setResizable(false);
            FailureTable.getColumnModel().getColumn(1).setResizable(false);
            FailureTable.getColumnModel().getColumn(2).setResizable(false);
            FailureTable.getColumnModel().getColumn(3).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 353;
        gridBagConstraints.ipady = 91;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
        jPanel21.add(jScrollPane10, gridBagConstraints);

        BrowserPanel2.addTab("Failures", jPanel21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(BrowserPanel2, gridBagConstraints);

        InformationPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));
        InformationPanel2.setPreferredSize(new java.awt.Dimension(320, 324));
        InformationPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel67.setText("Train Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel67, gridBagConstraints);

        jLabel68.setText("Current Line");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel68, gridBagConstraints);

        jLabel69.setText("Current Section");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel69, gridBagConstraints);

        jLabel70.setText("Current Block");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel70, gridBagConstraints);

        jLabel71.setText("Speed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel71, gridBagConstraints);

        jLabel72.setText("Authority");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel72, gridBagConstraints);

        jLabel74.setText("Current Capacity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel74, gridBagConstraints);

        InformationHeader2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        InformationHeader2.setText("Selected Train Information");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(InformationHeader2, gridBagConstraints);

        jLabel75.setText("Max Capacity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel75, gridBagConstraints);

        TrainSpeedLabel2.setText("mph");
        TrainSpeedLabel2.setPreferredSize(new java.awt.Dimension(15, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(TrainSpeedLabel2, gridBagConstraints);

        TrainAuthorityLabel2.setText("feet");
        TrainAuthorityLabel2.setPreferredSize(new java.awt.Dimension(15, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(TrainAuthorityLabel2, gridBagConstraints);

        TrainNameField.setText("254");
        TrainNameField.setMinimumSize(new java.awt.Dimension(10, 30));
        TrainNameField.setPreferredSize(new java.awt.Dimension(35, 26));
        TrainNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrainNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(TrainNameField, gridBagConstraints);

        CurrentLineField.setText("Green");
        CurrentLineField.setPreferredSize(new java.awt.Dimension(35, 26));
        CurrentLineField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrentLineFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(CurrentLineField, gridBagConstraints);

        CurrentBlockField.setText("4");
        CurrentBlockField.setPreferredSize(new java.awt.Dimension(35, 26));
        CurrentBlockField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrentBlockFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(CurrentBlockField, gridBagConstraints);

        CurrentSectionField.setText("B");
        CurrentSectionField.setPreferredSize(new java.awt.Dimension(35, 26));
        CurrentSectionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrentSectionFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(CurrentSectionField, gridBagConstraints);

        AuthorityField.setText("1542");
        AuthorityField.setPreferredSize(new java.awt.Dimension(35, 26));
        AuthorityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AuthorityFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(AuthorityField, gridBagConstraints);

        SpeedField.setText("23.2");
        SpeedField.setPreferredSize(new java.awt.Dimension(35, 26));
        SpeedField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpeedFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(SpeedField, gridBagConstraints);

        MaxCapacityField.setText("125");
        MaxCapacityField.setPreferredSize(new java.awt.Dimension(35, 26));
        MaxCapacityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaxCapacityFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(MaxCapacityField, gridBagConstraints);

        CurrentCapacityField.setText("50");
        CurrentCapacityField.setPreferredSize(new java.awt.Dimension(35, 26));
        CurrentCapacityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrentCapacityFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(CurrentCapacityField, gridBagConstraints);

        jLabel76.setText("Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        InformationPanel2.add(jLabel76, gridBagConstraints);

        StatusField.setPreferredSize(new java.awt.Dimension(35, 26));
        StatusField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 80;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        InformationPanel2.add(StatusField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(InformationPanel2, gridBagConstraints);

        AdditionalInfoPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Component Disable"));
        AdditionalInfoPanel2.setLayout(new java.awt.GridBagLayout());

        TrainShutdownButton.setText("Train Shutdown");
        TrainShutdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrainShutdownButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        AdditionalInfoPanel2.add(TrainShutdownButton, gridBagConstraints);

        TrackShutdownButton.setText("Track Shutdown");
        TrackShutdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrackShutdownButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        AdditionalInfoPanel2.add(TrackShutdownButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(AdditionalInfoPanel2, gridBagConstraints);

        DispatchControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dispatch Control"));
        DispatchControlPanel.setLayout(new java.awt.GridBagLayout());

        jLabel8.setText("Please select departure details for the newly dispatched train:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipady = 15;
        DispatchControlPanel.add(jLabel8, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        DispatchButton1.setText("Dispatch");
        DispatchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispatchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(DispatchButton1, gridBagConstraints);

        ResetButton.setText("Reset");
        ResetButton.setPreferredSize(new java.awt.Dimension(100, 29));
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(ResetButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        DispatchControlPanel.add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Line To Dispatch Onto");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel3.add(jLabel9, gridBagConstraints);

        DispatchLineBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Green", "Red" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(DispatchLineBox, gridBagConstraints);

        jLabel10.setText("Set Dispatch Speed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel3.add(jLabel10, gridBagConstraints);

        jLabel11.setText("Set Dispatch Authority");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel3.add(jLabel11, gridBagConstraints);

        DispatchSpeedField.setText("Enter Speed");
        DispatchSpeedField.setToolTipText("");
        DispatchSpeedField.setPreferredSize(new java.awt.Dimension(100, 26));
        DispatchSpeedField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DispatchSpeedFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(DispatchSpeedField, gridBagConstraints);

        DispatchAuthorityField.setText("Enter Authority");
        DispatchAuthorityField.setPreferredSize(new java.awt.Dimension(100, 26));
        DispatchAuthorityField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DispatchAuthorityFieldMouseClicked(evt);
            }
        });
        DispatchAuthorityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispatchAuthorityFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel3.add(DispatchAuthorityField, gridBagConstraints);

        jLabel12.setText("mph");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(jLabel12, gridBagConstraints);

        jLabel13.setText("feet");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(jLabel13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        DispatchControlPanel.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(DispatchControlPanel, gridBagConstraints);

        SystemInformationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("System Information"));
        SystemInformationPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SystemInformationPanelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SystemInformationPanelMouseEntered(evt);
            }
        });
        SystemInformationPanel.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        SystemInformationPanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Rush Hour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        SystemInformationPanel.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Throughput");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        SystemInformationPanel.add(jLabel4, gridBagConstraints);

        TimeField.setText("12:31");
        TimeField.setPreferredSize(new java.awt.Dimension(45, 26));
        TimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        SystemInformationPanel.add(TimeField, gridBagConstraints);

        RushHourField.setText("YES");
        RushHourField.setPreferredSize(new java.awt.Dimension(45, 26));
        RushHourField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RushHourFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        SystemInformationPanel.add(RushHourField, gridBagConstraints);

        ThroughputField.setText("1203");
        ThroughputField.setPreferredSize(new java.awt.Dimension(45, 26));
        ThroughputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThroughputFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        SystemInformationPanel.add(ThroughputField, gridBagConstraints);

        jLabel1.setText("p/hr");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        SystemInformationPanel.add(jLabel1, gridBagConstraints);

        jLabel7.setText("PM");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        SystemInformationPanel.add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(SystemInformationPanel, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Operation Mode"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        SelectOperationMode2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manual", "Automatic" }));
        SelectOperationMode2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectOperationMode2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel4.add(SelectOperationMode2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(jPanel4, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel19ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel19ComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel19ComponentShown

    private void jPanel20ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel20ComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel20ComponentShown

    private void SelectOperationMode2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectOperationMode2ActionPerformed
        if (SelectOperationMode2.getSelectedIndex() == 0) {
            ChangeParametersButton3.setEnabled(true);
            DispatchButton1.setEnabled(true);
            TrainShutdownButton.setEnabled(true);
            TrackShutdownButton.setEnabled(true);
        }       // TODO add your handling code here:
        else {
            ChangeParametersButton3.setEnabled(false);
            DispatchButton1.setEnabled(false);
            TrainShutdownButton.setEnabled(false);
            TrackShutdownButton.setEnabled(false);
        }
    }//GEN-LAST:event_SelectOperationMode2ActionPerformed

    private void ThroughputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThroughputFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ThroughputFieldActionPerformed

    private void TimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeFieldActionPerformed
        //check for rushhour
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeFieldActionPerformed

    private void CurrentLineFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrentLineFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CurrentLineFieldActionPerformed

    private void CurrentBlockFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrentBlockFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CurrentBlockFieldActionPerformed

    private void CurrentSectionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrentSectionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CurrentSectionFieldActionPerformed

    private void AuthorityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AuthorityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AuthorityFieldActionPerformed

    private void SpeedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpeedFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SpeedFieldActionPerformed

    private void MaxCapacityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaxCapacityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MaxCapacityFieldActionPerformed

    private void CurrentCapacityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrentCapacityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CurrentCapacityFieldActionPerformed

   
    private void RushHourFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RushHourFieldActionPerformed
        int timeHours, timeMinutes;
        String time = (String)TimeField.getText();
        String[] timeParts = time.split(":"); 
        timeHours = Integer.parseInt((timeParts[0]));
        timeMinutes = Integer.parseInt(timeParts[1]);
        System.out.println(timeHours);
        if ((timeHours < 8) && (timeHours > 5)){
            RushHourField.setText("YES");
        }
        else{
            RushHourField.setText("NO");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_RushHourFieldActionPerformed

    private void ChangeParametersButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeParametersButton3ActionPerformed
        //get trainID from selected row first column
        ChangeParametersGUI params = new ChangeParametersGUI(trainID);
        params.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_ChangeParametersButton3ActionPerformed

    private void TrackShutdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrackShutdownButtonActionPerformed
        TrackShutdownGUI trackShutdown = new TrackShutdownGUI();
        trackShutdown.setVisible(true);// TODO add your handling code here:
    }//GEN-LAST:event_TrackShutdownButtonActionPerformed

    private void TrainShutdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrainShutdownButtonActionPerformed
        TrainShutdownGUI trainShutdown = new TrainShutdownGUI();
        trainShutdown.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_TrainShutdownButtonActionPerformed

    private void TrainNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrainNameFieldActionPerformed
        
    }//GEN-LAST:event_TrainNameFieldActionPerformed

    private void TrainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TrainTableMouseClicked
        
        InitializeGUIObject();

        InformationHeader2.setText("Selected Train Information");

        jLabel67.setText("Train Name");
        jLabel68.setText("Current Line");
        jLabel69.setText("Current Section");
        jLabel70.setText("Current Block");
        jLabel71.setText("Speed");
        jLabel72.setText("Authority");
        jLabel74.setText("Current Capacity");
        jLabel75.setText("Max Capacity");
        jLabel76.setText("Status");

        
        TrainSpeedLabel2.setText("mph");
        TrainAuthorityLabel2.setText("feet");
       
        
        SpeedField.setVisible(true);
        AuthorityField.setVisible(true);
        CurrentCapacityField.setVisible(true);
        MaxCapacityField.setVisible(true);
        StatusField.setVisible(true);
       
        
        
        if ( evt.getClickCount() == 1){
            JTable table = (JTable)evt.getSource();
            int row = table.getSelectedRow();
            trainID = (int)table.getValueAt(row, 1);

            //global to program
            
            //parse position field
            String line = (String)table.getValueAt(row, 0);
            String position = (String)table.getValueAt(row, 2);
            String[] parts = position.split(":");
            String partSection = parts[0]; 
            String partBlock = parts[1];
            Object booleanStatus = table.getValueAt(row, 3);
            if (booleanStatus == null){
                StatusField.setText("Disabled");
            }
            else {
                StatusField.setText("Operational");
            }
            
            CurrentLineField.setText(line);
            CurrentSectionField.setText(partSection);
            CurrentBlockField.setText(partBlock);
            TrainNameField.setText(Integer.toString(trainID));
            
            if (SelectOperationMode2.getSelectedIndex() == 1){
                ChangeParametersButton3.setEnabled(false);
            }
            else { 
                ChangeParametersButton3.setEnabled(true);
            }
        }
        
        if ( evt.getClickCount() == 2){
            //double mouse click calls Train Model CreateGUIObject to dispalay IDed train model
            JTable table = (JTable)evt.getSource();
            int row = table.getSelectedRow();
            trainID = (int)table.getValueAt(row, 0);
            
            //TrainHandler.CreateGUIObject(trainID);
        }
    
                // TODO add your handling code here:
    }//GEN-LAST:event_TrainTableMouseClicked
    
    /**
     *
     * @param trainID
     * @param passTrainLine
     */
    public void DisableTrain(int trainID, String passTrainLine){
        //DefaultTableModel model = (DefaultTableModel)TrainTable.getModel();
        Boolean bool = false;
        for ( int i = 0; i < TrainTable.getRowCount(); i ++){
            if (((String)TrainTable.getValueAt(i, 0)).equals(passTrainLine)){
                //System.out.println("match");
               if ((Integer)TrainTable.getValueAt(i, 1) == trainID){
                   //System.out.println("id match");
                    TrainTable.setValueAt(bool, i, 3);
                    String trainPosition = (String)TrainTable.getValueAt(i, 2);
                    //updateFailureTable(passTrainLine, trainPosition, )
               }
            }
        }
        TrainTable.repaint();
    }
    
    private void StatusFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StatusFieldActionPerformed

    private void BlockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BlockTableMouseClicked
        //set up screen for Block Info
        
        InitializeGUIObject();
        
        InformationHeader2.setText("Selected Block Information");
        jLabel67.setText("Block Section");
        jLabel68.setText("Block Line");
        jLabel69.setText("Block Number");
        jLabel70.setText("Block Length");
        jLabel71.setText("Block Speed");
        jLabel72.setText("Station");
        jLabel74.setText("Crossing");
        jLabel75.setText("Switch");
        jLabel76.setText("Status");
   
        TrainSpeedLabel2.setText("");
        TrainAuthorityLabel2.setText("");
       
        
        SpeedField.setVisible(true);
        AuthorityField.setVisible(true);
        CurrentCapacityField.setVisible(true);
        MaxCapacityField.setVisible(true);
        StatusField.setVisible(true);
        
        
       
        if (evt.getClickCount() == 1){
            JTable blockTable = (JTable)evt.getSource();
            int row = blockTable.getSelectedRow();
            String blockSection = (String)blockTable.getValueAt(row, 1);
            int blockNumber = (int)blockTable.getValueAt(row, 2);
            String line = (String)blockTable.getValueAt(row, 0);

            TrainNameField.setText(blockSection);
            CurrentSectionField.setText(Integer.toString(blockNumber));
            CurrentLineField.setText(line);
            
            Boolean booleanBlockStatus = (Boolean)blockTable.getValueAt(row, 3);
            if (booleanBlockStatus == true){
                StatusField.setText("Operational");
            }
            else {
                StatusField.setText("Disabled");
            }
            
            if ((blockNumber == 2) || (blockNumber == 9) || (blockNumber == 16) || (blockNumber == 22)){
                AuthorityField.setText("YES");
            } //station
            else{
                AuthorityField.setText("NO");
            }
            
            if (blockNumber == 12 ){
                MaxCapacityField.setText("YES");      
            }
            else{
                MaxCapacityField.setText("NO");      
            } //switch
            
            if (blockNumber == 19 ){
                CurrentCapacityField.setText("YES");      
            }
            else{
                CurrentCapacityField.setText("NO");      
            } //switch
            
            
        }   
        
        if (evt.getClickCount() == 2){
        }



// TODO add your handling code here:
    }//GEN-LAST:event_BlockTableMouseClicked

    private void FailureTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FailureTableMouseClicked
        InitializeGUIObject();
        
        InformationHeader2.setText("Selected Failure Information");
        
        jLabel67.setText("Failure Type");
        jLabel68.setText("Failure Line");
        jLabel69.setText("Failure Block");
        jLabel70.setText("Failure Section");
        jLabel71.setText("");
        jLabel72.setText("");
        jLabel74.setText("");
        jLabel75.setText("");
        jLabel76.setText("");
        TrainSpeedLabel2.setText("");
        TrainAuthorityLabel2.setText("");
        
        
        SpeedField.setVisible(false);
        AuthorityField.setVisible(false);
        CurrentCapacityField.setVisible(false);
        MaxCapacityField.setVisible(false);
        StatusField.setVisible(false);
        
        if (evt.getClickCount() == 1){
            JTable failureTable = (JTable)evt.getSource();
            int row = failureTable.getSelectedRow();
            String failureLine = (String)failureTable.getValueAt(row, 0);
            String failureSection = (String)failureTable.getValueAt(row, 1);
            int failureBlock = (int)failureTable.getValueAt(row, 2);
            String failureType = (String)failureTable.getValueAt(row, 3);
            
            TrainNameField.setText(failureType);
            CurrentLineField.setText(failureLine);
            CurrentSectionField.setText(failureSection);
            CurrentBlockField.setText(Integer.toString(failureBlock));
            
        }
        
        if (evt.getClickCount() == 2){
            
        }
            
        
        
// TODO add your handling code here:
    }//GEN-LAST:event_FailureTableMouseClicked

    private void SystemInformationPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SystemInformationPanelMouseEntered
    }//GEN-LAST:event_SystemInformationPanelMouseEntered

    private void SystemInformationPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SystemInformationPanelMouseExited
// TODO add your handling code here:
    }//GEN-LAST:event_SystemInformationPanelMouseExited

    private void DispatchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispatchButton1ActionPerformed

        String dispatchLine = (String)DispatchLineBox.getSelectedItem();
        String dispatchBlock = "A";
        int dispatchSection = 1;

         double dispatchSpeed = Double.valueOf(DispatchSpeedField.getText());
         double dispatchAuthority = Double.valueOf(DispatchAuthorityField.getText());
//        //check time to see number of cars
//        //String currentTime = CommandTrackControlGUI.TimeField.getText();
//        //if ( currentTime ...)
//        //attatch extra cars based on time and redo weight
          iterativeID++;
          int dispatchID = iterativeID;
        
        addRow(dispatchLine, dispatchBlock, dispatchSection, dispatchID);
        TrainModel newTrain = new TrainModel(dispatchSpeed, dispatchAuthority, 1);

        //get fields
        //globally dispatch
        // TODO add your handling code here:
    }//GEN-LAST:event_DispatchButton1ActionPerformed
    
    public void addRow(String dispatchLine, String dispatchBlock, int dispatchSection, int dispatchID) {
      String concatination = (dispatchBlock + ":" + Integer.toString(dispatchSection));
      Object[] newRow = new Object[4];
      newRow[0] = dispatchLine;
      newRow[1] = dispatchID;
      newRow[2] = concatination;
      newRow[3] = true;
      DefaultTableModel model = (DefaultTableModel)TrainTable.getModel();
      model.addRow(newRow);
   }
    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        DispatchSpeedField.setText("0");
        DispatchAuthorityField.setText("0");
        DispatchLineBox.setSelectedIndex(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void DispatchAuthorityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispatchAuthorityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DispatchAuthorityFieldActionPerformed

    private void DispatchSpeedFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DispatchSpeedFieldMouseClicked
        DispatchSpeedField.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_DispatchSpeedFieldMouseClicked

    private void DispatchAuthorityFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DispatchAuthorityFieldMouseClicked
        DispatchAuthorityField.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_DispatchAuthorityFieldMouseClicked

//    private void UpdateTableInformation(java.awt.event.ActionEvent evt){
//        int selectedRowIndex = TrainTable.getSelectedRow();
//        String TrainID = TrainTable.getModel().getValueAt(selectedRowIndex, 0).toString(); 
//        TrainNameField.setText(TrainID);// TODO add your handling code here:
//    }
    
    /**
     *
     */
    public void InitializeGUIObject(){
        TrainNameField.setText("");
        CurrentLineField.setText("");
        CurrentBlockField.setText("0");
        CurrentSectionField.setText("");
        SpeedField.setText("0.00");
        AuthorityField.setText("0.00");
        CurrentCapacityField.setText("");
        MaxCapacityField.setText("");
        ThroughputField.setText("");
        StatusField.setText("");   
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdditionalInfoPanel2;
    private javax.swing.JTextField AuthorityField;
    private javax.swing.JTable BlockTable;
    private javax.swing.JTabbedPane BrowserPanel2;
    private javax.swing.JButton ChangeParametersButton3;
    private javax.swing.JTextField CurrentBlockField;
    private javax.swing.JTextField CurrentCapacityField;
    private javax.swing.JTextField CurrentLineField;
    private javax.swing.JTextField CurrentSectionField;
    private javax.swing.JTextField DispatchAuthorityField;
    private javax.swing.JButton DispatchButton1;
    private javax.swing.JPanel DispatchControlPanel;
    private javax.swing.JComboBox<String> DispatchLineBox;
    private javax.swing.JTextField DispatchSpeedField;
    private javax.swing.JTable FailureTable;
    private javax.swing.JLabel InformationHeader2;
    private javax.swing.JPanel InformationPanel2;
    private javax.swing.JLabel MapImage2;
    private javax.swing.JPanel MapPanel2;
    private javax.swing.JTextField MaxCapacityField;
    private javax.swing.JButton ResetButton;
    private javax.swing.JTextField RushHourField;
    private javax.swing.JComboBox<String> SelectOperationMode2;
    private javax.swing.JTextField SpeedField;
    private javax.swing.JTextField StatusField;
    private javax.swing.JPanel SystemInformationPanel;
    private javax.swing.JTextField ThroughputField;
    private javax.swing.JTextField TimeField;
    private javax.swing.JButton TrackShutdownButton;
    private javax.swing.JLabel TrainAuthorityLabel2;
    private javax.swing.JTextField TrainNameField;
    private javax.swing.JButton TrainShutdownButton;
    private javax.swing.JLabel TrainSpeedLabel2;
    private javax.swing.JTable TrainTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}


