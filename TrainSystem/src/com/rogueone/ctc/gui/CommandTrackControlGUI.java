/*
 * @author Robert Goldshear
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rogueone.ctc.gui;
import com.rogueone.global.Global;
import com.rogueone.trackmodel.Block;
import com.rogueone.trackmodel.Line;
import com.rogueone.trainsystem.TrainSystem;
import com.rogueone.trackmodel.Section;
import com.rogueone.trackmodel.Station;
import com.rogueone.trackmodel.TrackModel;
import com.rogueone.trainmodel.TrainModel;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 * @author Robert
 * The class to control the CTC in its entirety
 */
public class CommandTrackControlGUI extends javax.swing.JPanel {

    //Global variables to this module including all initializations
    public int iterativeID;
    double throughputValueGreen = 0;
    double throughputValueRed = 0;
    int trainsDispatched = 1;
    public TrainSystem trainSystem;
    private TrackModel trackModel;
    double trainsPerHourGreen = 0;
    double trainsPerHourRed = 0;

    /**
     * @author Robert Goldshear
     * Creates new form CommandTrackControlGUI
     */
    public CommandTrackControlGUI() {
        initComponents();
        InitializeGUIObject();
    }
    
    /**
     * @author Robert Goldshear
     * @param ts
     */
    public CommandTrackControlGUI(TrainSystem ts) {
        initComponents();

        this.trainSystem = ts;
        this.trackModel = ts.getTrackModel();
        updateGUI();
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        ChangeParametersButton3 = new javax.swing.JButton();
        BrowserPanel2 = new javax.swing.JTabbedPane();
        jPanel19 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        TrainTable = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane6 = new javax.swing.JScrollPane();
        BlockTable = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        FailureTable = new javax.swing.JTable();
        AdditionalInfoPanel2 = new javax.swing.JPanel();
        TrackShutdownButton = new javax.swing.JButton();
        SelectOperationMode2 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        greenLineThroughput = new javax.swing.JTextField();
        greenLabel = new javax.swing.JLabel();
        redLineThroughput = new javax.swing.JTextField();
        redLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        rushHourProgressBar = new javax.swing.JProgressBar();
        TrainShutdownButton = new javax.swing.JButton();
        DispatchControlPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        DispatchLineBox = new javax.swing.JComboBox<>();
        DispatchButton1 = new javax.swing.JButton();
        DispatchSpeedField = new javax.swing.JTextField();
        DispatchAuthorityField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(250, 610));
        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(250, 600));

        jPanel1.setPreferredSize(new java.awt.Dimension(250, 650));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        ChangeParametersButton3.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        ChangeParametersButton3.setText("Update Selected Train");
        ChangeParametersButton3.setEnabled(false);
        ChangeParametersButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeParametersButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jPanel1.add(ChangeParametersButton3, gridBagConstraints);

        BrowserPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Browser", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Futura", 0, 13))); // NOI18N
        BrowserPanel2.setMinimumSize(new java.awt.Dimension(250, 193));
        BrowserPanel2.setPreferredSize(new java.awt.Dimension(250, 300));

        jPanel19.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel19ComponentShown(evt);
            }
        });
        jPanel19.setLayout(new java.awt.GridBagLayout());

        TrainTable.setFont(new java.awt.Font("Futura", 0, 12)); // NOI18N
        TrainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Line", "Train", "Position", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TrainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TrainTableMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(TrainTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 249;
        gridBagConstraints.ipady = 63;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        jPanel19.add(jScrollPane9, gridBagConstraints);

        BrowserPanel2.addTab("Trains", jPanel19);

        jPanel20.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel20ComponentShown(evt);
            }
        });
        jPanel20.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.ipady = 123;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel20.add(jSeparator3, gridBagConstraints);

        BlockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Line", "Section", "Block", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BlockTable.setPreferredSize(new java.awt.Dimension(300, 176));
        BlockTable.setRequestFocusEnabled(false);
        BlockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BlockTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(BlockTable);
        if (BlockTable.getColumnModel().getColumnCount() > 0) {
            BlockTable.getColumnModel().getColumn(0).setResizable(false);
            BlockTable.getColumnModel().getColumn(1).setResizable(false);
            BlockTable.getColumnModel().getColumn(2).setResizable(false);
            BlockTable.getColumnModel().getColumn(3).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 249;
        gridBagConstraints.ipady = 63;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        jPanel20.add(jScrollPane6, gridBagConstraints);

        BrowserPanel2.addTab("Blocks", jPanel20);

        jPanel21.setLayout(new java.awt.GridBagLayout());

        FailureTable.setForeground(javax.swing.UIManager.getDefaults().getColor("Button.select"));
        FailureTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Track", "Section", "Block", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FailureTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FailureTableMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(FailureTable);
        if (FailureTable.getColumnModel().getColumnCount() > 0) {
            FailureTable.getColumnModel().getColumn(0).setResizable(false);
            FailureTable.getColumnModel().getColumn(1).setResizable(false);
            FailureTable.getColumnModel().getColumn(2).setResizable(false);
            FailureTable.getColumnModel().getColumn(3).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 353;
        gridBagConstraints.ipady = 91;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
        jPanel21.add(jScrollPane10, gridBagConstraints);

        BrowserPanel2.addTab("Failures", jPanel21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jPanel1.add(BrowserPanel2, gridBagConstraints);

        AdditionalInfoPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "System Changes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Futura", 0, 13))); // NOI18N
        AdditionalInfoPanel2.setMinimumSize(new java.awt.Dimension(250, 175));
        AdditionalInfoPanel2.setPreferredSize(new java.awt.Dimension(250, 150));
        AdditionalInfoPanel2.setLayout(new java.awt.GridBagLayout());

        TrackShutdownButton.setFont(new java.awt.Font("Futura", 0, 12)); // NOI18N
        TrackShutdownButton.setText("Track Shutdown");
        TrackShutdownButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        TrackShutdownButton.setMaximumSize(new java.awt.Dimension(120, 29));
        TrackShutdownButton.setMinimumSize(new java.awt.Dimension(120, 29));
        TrackShutdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrackShutdownButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        AdditionalInfoPanel2.add(TrackShutdownButton, gridBagConstraints);

        SelectOperationMode2.setFont(new java.awt.Font("Futura", 0, 12)); // NOI18N
        SelectOperationMode2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manual", "Automatic" }));
        SelectOperationMode2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectOperationMode2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        AdditionalInfoPanel2.add(SelectOperationMode2, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        jLabel4.setText("Throughput (in trains/hour)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        AdditionalInfoPanel2.add(jLabel4, gridBagConstraints);

        greenLineThroughput.setEditable(false);
        greenLineThroughput.setFont(new java.awt.Font("Futura", 1, 12)); // NOI18N
        greenLineThroughput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        greenLineThroughput.setMaximumSize(new java.awt.Dimension(100, 27));
        greenLineThroughput.setMinimumSize(new java.awt.Dimension(110, 30));
        greenLineThroughput.setPreferredSize(new java.awt.Dimension(48, 26));
        greenLineThroughput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenLineThroughputActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        AdditionalInfoPanel2.add(greenLineThroughput, gridBagConstraints);

        greenLabel.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        greenLabel.setText("Green");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        AdditionalInfoPanel2.add(greenLabel, gridBagConstraints);

        redLineThroughput.setEditable(false);
        redLineThroughput.setFont(new java.awt.Font("Futura", 1, 12)); // NOI18N
        redLineThroughput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        redLineThroughput.setMaximumSize(new java.awt.Dimension(100, 100));
        redLineThroughput.setMinimumSize(new java.awt.Dimension(110, 30));
        redLineThroughput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redLineThroughputActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        AdditionalInfoPanel2.add(redLineThroughput, gridBagConstraints);

        redLabel.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        redLabel.setText("Red");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        AdditionalInfoPanel2.add(redLabel, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        jLabel1.setText("Rush Hour");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        AdditionalInfoPanel2.add(jLabel1, gridBagConstraints);

        rushHourProgressBar.setMaximum(120);
        rushHourProgressBar.setToolTipText("");
        rushHourProgressBar.setMaximumSize(new java.awt.Dimension(100, 20));
        rushHourProgressBar.setMinimumSize(new java.awt.Dimension(110, 30));
        rushHourProgressBar.setPreferredSize(new java.awt.Dimension(120, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        AdditionalInfoPanel2.add(rushHourProgressBar, gridBagConstraints);

        TrainShutdownButton.setFont(new java.awt.Font("Futura", 0, 12)); // NOI18N
        TrainShutdownButton.setText("Train Shutdown");
        TrainShutdownButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        TrainShutdownButton.setMaximumSize(new java.awt.Dimension(120, 29));
        TrainShutdownButton.setMinimumSize(new java.awt.Dimension(120, 29));
        TrainShutdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrainShutdownButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.ipady = 3;
        AdditionalInfoPanel2.add(TrainShutdownButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jPanel1.add(AdditionalInfoPanel2, gridBagConstraints);

        DispatchControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dispatch Control", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Futura", 0, 13))); // NOI18N
        DispatchControlPanel.setMinimumSize(new java.awt.Dimension(250, 150));
        DispatchControlPanel.setPreferredSize(new java.awt.Dimension(250, 150));
        DispatchControlPanel.setLayout(new java.awt.GridBagLayout());

        jLabel9.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        jLabel9.setText("Line");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        DispatchControlPanel.add(jLabel9, gridBagConstraints);

        DispatchLineBox.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        DispatchLineBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GREEN", "RED" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        DispatchControlPanel.add(DispatchLineBox, gridBagConstraints);

        DispatchButton1.setFont(new java.awt.Font("Futura", 0, 18)); // NOI18N
        DispatchButton1.setText("Dispatch");
        DispatchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispatchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
        DispatchControlPanel.add(DispatchButton1, gridBagConstraints);

        DispatchSpeedField.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        DispatchSpeedField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DispatchSpeedField.setText("40");
        DispatchSpeedField.setToolTipText("");
        DispatchSpeedField.setPreferredSize(new java.awt.Dimension(100, 26));
        DispatchSpeedField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DispatchSpeedFieldMouseClicked(evt);
            }
        });
        DispatchSpeedField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispatchSpeedFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 3, 1);
        DispatchControlPanel.add(DispatchSpeedField, gridBagConstraints);

        DispatchAuthorityField.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        DispatchAuthorityField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DispatchAuthorityField.setText("90000");
        DispatchAuthorityField.setPreferredSize(new java.awt.Dimension(100, 26));
        DispatchAuthorityField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DispatchAuthorityFieldMouseClicked(evt);
            }
        });
        DispatchAuthorityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DispatchAuthorityFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 4;
        gridBagConstraints.insets = new java.awt.Insets(3, 1, 3, 1);
        DispatchControlPanel.add(DispatchAuthorityField, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Authority");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        DispatchControlPanel.add(jLabel11, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        jLabel10.setText("Speed");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        DispatchControlPanel.add(jLabel10, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        jLabel12.setText("mph");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        DispatchControlPanel.add(jLabel12, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        jLabel13.setText("feet");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        DispatchControlPanel.add(jLabel13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        jPanel1.add(DispatchControlPanel, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @author Robert Goldshear
     * updates all necessary fields in the GUI 
     */
    public void updateGUI(){
        updateTime();
        updateBlockTable(); 
        updateTrainTable();
    }
    
    /**
     * @author Robert Goldshear
     * initializes block table with information from Track Model
     */
    public void updateBlockTable(){
        BlockTable.removeAll();
        
        ArrayList<Block> blocks = this.trackModel.getBlockArray();
        ArrayList<Line> lines = this.trackModel.getLineArray();
        ArrayList<Section> sections = this.trackModel.getSectionArray();
        
        DefaultTableModel blockModel = (DefaultTableModel) BlockTable.getModel();
        Object[] newBlock = new Object[4];

        for (Line l: lines) {
            for (Section s: l.getSections()){
                for (Block b: s.getBlocks()){
                           
                    newBlock[0] = (Object)l.getLineID().toString();
                    newBlock[1] = (Object)s.getSectionID().toString();
                    newBlock[2] = (int)b.getID();
                    newBlock[3] = (boolean)true;
                            
                    blockModel.addRow(newBlock);
                    BlockTable.repaint();
                    
                }
           }  
        }  
    }
    
    /**
     * @author Robert Goldshear
     * @param trainID
     */
    private void removeTrainFromTable(int trainID){
       int trainIDRow = 0;
         
        DefaultTableModel model = (DefaultTableModel)TrainTable.getModel();
        for(int i = 0; i < model.getRowCount(); i++){
            for(int j = 0; j < model.getColumnCount(); j++){
                if(model.getValueAt(i, j).equals(trainID)){
                    trainIDRow = i;
                }
            }
        }
        model.removeRow(trainIDRow);      
    }
    
    /**
     * @author Robert Goldshear
     * @param block
     */
    public void failureFromTrackModel(Block block){
         Object[] newFailure = new Object[4];
         DefaultTableModel failureModel = (DefaultTableModel) FailureTable.getModel();
 
         newFailure[2] = block.getID();
         newFailure[1] = block.getSection().toString();
         newFailure[0] = block.getLine().toString();
                 
         if (block.getFailureBrokenRail() == true){
             newFailure[3] = "Rail";
         }
         if (block.getFailurePowerOutage() == true){
             newFailure[3] = "Power";
         }
         if (block.getFailureTrackCircuit() == true){
             newFailure[3] = "Circuit";
         }
         
         failureModel.addRow(newFailure);
         FailureTable.repaint();
 
     }
    
    /**
     * @author Robert Goldshear
     * calculates offsets in presence to determine train position
     */
    public void updateTrainTable(){
            
       for (int i = 0; i < TrainTable.getRowCount(); i++) {
            int tempID = (Integer)TrainTable.getValueAt(i, 1);
            String tempLocation = trainSystem.getTrainHandler().getBlockForTrain(tempID);
            TrainTable.setValueAt(tempLocation, i, 2);
            TrainTable.repaint();
       }
    }
    
    /**
     * @author Robert Goldshear
     * Updates time and rush hour fields in GUI
     */
    public void updateTime(){
       
        if ((this.trainSystem.getClock().getHour() < 6) || (this.trainSystem.getClock().getHour() >= 8)){
            rushHourProgressBar.setValue(0);
        }
        
        else{
            if(this.trainSystem.getClock().getHour() == 6){
                rushHourProgressBar.setValue(this.trainSystem.getClock().getMinute());
            }
            if(this.trainSystem.getClock().getHour() == 7){
              rushHourProgressBar.setValue((this.trainSystem.getClock().getMinute()) + 60); 
            }
        }
        
        if(SelectOperationMode2.getSelectedIndex() == 1){
            getDispatchTimes();
        }

        calculateThroughput();
    }
    
    /**
     * @author Robert Goldshear
     * Calculates throughput for both lines 
     */
    private void calculateThroughput(){
        throughputValueGreen = 0;
        throughputValueRed = 0;
        if(this.trainSystem.getClock().getMinute() == 59 && this.trainSystem.getClock().getSecond() == 59){
            this.trainsPerHourGreen = 0;
            this.trainsPerHourRed = 0;
        }
        double tempValue;
        
        ArrayList<TrainModel> trainList = trainSystem.getTrainHandler().getTrains();
        
        int arraySize = trainList.size();
        for(int i = 0 ; i < arraySize ; i++) {
             tempValue = (trainList.get(i).getTotalDistanceTraveledFeet())/trainSystem.getTrackModel().getLine(Global.Line.valueOf(trainList.get(i).getLine())).getTotalLength();
            if(Global.Line.valueOf(trainList.get(i).getLine()) == Global.Line.GREEN){
                throughputValueGreen += tempValue;
            } else {
                throughputValueRed += tempValue;
            }
        }
        
        throughputValueGreen += trainsPerHourGreen;
        throughputValueRed += trainsPerHourRed;
        
        greenLineThroughput.setText(String.format("%.2f", throughputValueGreen));
        redLineThroughput.setText(String.format("%.2f", throughputValueRed));

    }
   
    private void jPanel19ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel19ComponentShown
    }//GEN-LAST:event_jPanel19ComponentShown

    private void jPanel20ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel20ComponentShown
    }//GEN-LAST:event_jPanel20ComponentShown

    private void SelectOperationMode2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectOperationMode2ActionPerformed
        if (SelectOperationMode2.getSelectedIndex() == 0) {
            ChangeParametersButton3.setEnabled(true);
            DispatchButton1.setEnabled(true);
            TrackShutdownButton.setEnabled(true);
            TrainShutdownButton.setEnabled(true);
        }
        else {
            ChangeParametersButton3.setEnabled(false);
            DispatchButton1.setEnabled(false);
            TrackShutdownButton.setEnabled(false);
            TrainShutdownButton.setEnabled(false);

            
        }

    }//GEN-LAST:event_SelectOperationMode2ActionPerformed

    /**
     * @author Robert Goldshear
     * @return boolean if the system is in automatic mode
     */
    public boolean isAutomatic(){
        if (SelectOperationMode2.getSelectedIndex() == 1){
            return true;
        }
        return false;
    }
    
    private void getDispatchTimes(){
    
        int autoDispatchHour = trainSystem.getClock().getHour();
        int autoDispatchMinute = trainSystem.getClock().getMinute();
        int autoDispatchSecond = trainSystem.getClock().getSecond();
        autoDispatch(autoDispatchHour, autoDispatchMinute, autoDispatchSecond); 
    
    }

    private void dispatchNewTrain(int speed, int authority, int cars, String line, int ID){
        if (trainSystem.getTrackControllerHandler().requestDispatch((Global.Line.valueOf(line)))){
            trainSystem.dispatchTrain(speed, authority, cars, line, ID);
            addRow(line, "A", 1, ID);
            iterateID();
        }
        else{
            JOptionPane.showMessageDialog(null, "Unsafe Dispatch Command. Train in Proximity.", "Error",
                                        JOptionPane.ERROR_MESSAGE);
        }
    }

    private void autoDispatch(int autoDispatchHour, int autoDispatchMinute, int autoDispatchSecond){
        int greenID = iterativeID;
        int redID = greenID++;
        ArrayList<String> dispatchTimes = trainSystem.getScheduler().getDispatchTimes();
            for (String times : dispatchTimes){
                String tempTime = autoDispatchHour + ":" + autoDispatchMinute + "am";
                if(autoDispatchSecond == 0){
                    if (tempTime.equals(times)) {
                        dispatchNewTrain(40, 90000, getNumberCars(), "GREEN", greenID);
                        dispatchNewTrain(40, 90000, getNumberCars(), "RED", redID);

                    }
                } 
            }    
    }

    private int iterateID(){
        iterativeID++;
        System.out.println("New ID is: " + iterativeID ); //checking to make sure multi line functionality cooperates
        return iterativeID;
    }
    
    private void greenLineThroughputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenLineThroughputActionPerformed
    }//GEN-LAST:event_greenLineThroughputActionPerformed


    private void ChangeParametersButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeParametersButton3ActionPerformed
        ChangeParametersGUI params = new ChangeParametersGUI(this, trainSystem);
        params.setVisible(true); //brings up a change parameters gui in reference to the train
    }//GEN-LAST:event_ChangeParametersButton3ActionPerformed

    private void TrackShutdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrackShutdownButtonActionPerformed
        TrackShutdownGUI trackShutdown = new TrackShutdownGUI(this, trainSystem);
        trackShutdown.setVisible(true); //brings up a track shutdown gui in reference to the system
    }//GEN-LAST:event_TrackShutdownButtonActionPerformed

    private void TrainTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TrainTableMouseClicked

        InitializeGUIObject();
        int trainID;

        JTable selectCheck = (JTable) evt.getSource();

        if (selectCheck != null) {
            ChangeParametersButton3.setEnabled(true);
        } else {
            ChangeParametersButton3.setEnabled(false);
        }

        if (evt.getClickCount() == 1) {

            JTable table = (JTable) evt.getSource();
            int row = table.getSelectedRow();
            trainID = (int) table.getValueAt(row, 1);
  
            String line = (String) table.getValueAt(row, 0);
            String position = (String) table.getValueAt(row, 2);
            String[] parts = position.split(":");
            String partSection = parts[0];
            String partBlock = parts[1];
            Boolean booleanStatus = (Boolean) (table.getValueAt(row, 3));


            if (SelectOperationMode2.getSelectedIndex() == 1) {
                ChangeParametersButton3.setEnabled(false);
            } else {
                ChangeParametersButton3.setEnabled(true);
            }
            
       }

        if (evt.getClickCount() == 2) {
            //double mouse click calls Train Model CreateGUIObject to dispalay IDed train model
            JTable table = (JTable) evt.getSource();
            int row = table.getSelectedRow();
            String trainString = table.getValueAt(row, 1).toString();
            trainID = Integer.parseInt(trainString);
            trainSystem.getTrainHandler().showObjectsFromCTC(trainID);
            
        }

    }//GEN-LAST:event_TrainTableMouseClicked

    /**
     * @author Robert Goldshear
     * @param trainID
     * @param passTrainLine
     */
    public void DisableTrain(int trainID, String passTrainLine) {
        Boolean bool = false;
        for (int i = 0; i < TrainTable.getRowCount(); i++) {
            if (((String) TrainTable.getValueAt(i, 0)).equals(passTrainLine)) {
                if ((Integer) TrainTable.getValueAt(i, 1) == trainID) {
                    TrainTable.setValueAt(bool, i, 3);
                }
            }
        }
        TrainTable.repaint();
        checkForFailure();
    }

    /**
     * @author Robert Goldshear
     * @param lineName
     * @param segmentName
     * @param blockName
     */
    public void DisableTrack(String lineName, String segmentName, int blockName) {
        Boolean trackBool = false;

        for (int i = 0; i < BlockTable.getRowCount(); i++) {
            if (((String) BlockTable.getValueAt(i, 0)).equals(lineName)) {
                if (((String) BlockTable.getValueAt(i, 1)).equals(segmentName)) {
                    if ((Integer) BlockTable.getValueAt(i, 2) == blockName) {
                        BlockTable.setValueAt(trackBool, i, 3);
                    }
                }
            }
        }
        BlockTable.repaint();
        checkForFailure();
        trainSystem.getTrackControllerHandler().requestMaintenance(Global.Line.valueOf(lineName), blockName);
        trainSystem.getTrackControllerHandler().updateTrack(Global.Line.valueOf(lineName));
    }

    /**
     * @author Robert Goldshear
     */
    private void checkForFailure() {
        Object newFailureRow = new Object[4];

        DefaultTableModel trainTable = (DefaultTableModel) TrainTable.getModel();
        DefaultTableModel blockTable = (DefaultTableModel) BlockTable.getModel();

        for (int i = 0; i < TrainTable.getRowCount(); i++) {
            if ((Boolean) TrainTable.getValueAt(i, 3) == false) {
                String tableLine = (String) TrainTable.getValueAt(i, 0);
                String trainPosition = (String) (TrainTable.getValueAt(i, 2));
                String failureType = "Shutdown";
                updateFailureTable(tableLine, trainPosition, failureType);
            }
        }

        for (int i = 0; i < BlockTable.getRowCount(); i++) {
            if ((Boolean) BlockTable.getValueAt(i, 3) == false) {
                String tableLine = (String) BlockTable.getValueAt(i, 0);
                String trainPosition = (String) ((BlockTable.getValueAt(i, 1) + ":" + BlockTable.getValueAt(i, 2)));
                String failureType = "Shutdown";
                updateFailureTable(tableLine, trainPosition, failureType);
            }
        }

    }

    /**
     * 
     * @param passTrainLine
     * @param trainPosition
     * @param failureType
     */
    private void updateFailureTable(String passTrainLine, String trainPosition, String failureType) {

        String[] positionParts = trainPosition.split(":");
        String failureSection = positionParts[0];
        String failureBlock = positionParts[1];
        Object[] newRow = new Object[4];
        newRow[0] = passTrainLine;
        newRow[1] = failureSection;
        newRow[2] = failureBlock;
        newRow[3] = failureType;
        DefaultTableModel model = (DefaultTableModel) FailureTable.getModel();

        if (!(existsInTable(FailureTable, newRow))) {
            model.addRow(newRow);
            FailureTable.repaint();
        }

    }

    /**
     * @author Robert Goldshear
     * @param table
     * @param entry
     * @return boolean if the value exists in the provided table
     */
    public boolean existsInTable(JTable table, Object[] entry) {
        // Get row and column count
        int rowCount = table.getRowCount();
        int colCount = table.getColumnCount();
        // Get Current Table Entry
        String curEntry = "";
        for (Object o : entry) {
            String e = o.toString();
            curEntry = curEntry + " " + e;
        }
        // Check against all entries
        for (int i = 0; i < rowCount; i++) {
            String rowEntry = "";
            for (int j = 0; j < colCount; j++) {
                rowEntry = rowEntry + " " + table.getValueAt(i, j).toString();
            }
            if (rowEntry.equalsIgnoreCase(curEntry)) {
                return true;
            }
        }
        return false;
    }

    private void BlockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BlockTableMouseClicked
        InitializeGUIObject();
        if (evt.getClickCount() == 1) {
            JTable blockTable = (JTable) evt.getSource();
            int row = blockTable.getSelectedRow();
            String blockSection = (String) blockTable.getValueAt(row, 1);
            int blockNumber = (int) blockTable.getValueAt(row, 2);
            String line = (String) blockTable.getValueAt(row, 0);

            for (Block b : this.trackModel.getBlockArray()){
                if (b.getID() == blockNumber){
                    double blockLength = b.getLength();
                    double blockSpeedLimit = b.getSpeedLimit();
                    Station blockStation = b.getStation();
                    int blockSwitchID = b.getSwitchID();
                    boolean blockCrossing = b.containsCrossing();
   
                }   
            }  
        }

        if (evt.getClickCount() == 2) {
            JTable blockTable = (JTable) evt.getSource();
            int row = blockTable.getSelectedRow();
            String line = (String) blockTable.getValueAt(row, 0);
            
            if(line.equals("GREEN")){
                this.trainSystem.getTrackViewGreen().displayTrackView(true);
            }
            else{
                this.trainSystem.getTrackViewRed().displayTrackView(true);
            }
        }

    }//GEN-LAST:event_BlockTableMouseClicked

    private void FailureTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FailureTableMouseClicked
        InitializeGUIObject();

        if (evt.getClickCount() == 2) {
            JTable failureTable = (JTable) evt.getSource();
            int failureRow = failureTable.getSelectedRow();
            trainSystem.getTrackControllerHandler().requestUpdateSpeedAuthority((Global.Line.valueOf((String) failureTable.getValueAt(failureRow,0))), (Integer.valueOf(((String)failureTable.getValueAt(failureRow,2)))), 40, 90000);

            if (failureTable.getValueAt(failureRow,0).equals("GREEN")){
                this.trainSystem.getTrackViewGreen().setBlockStatus((Global.Line.valueOf((String)failureTable.getValueAt(failureRow,0))), (String)failureTable.getValueAt(failureRow,1), Integer.parseInt((String)failureTable.getValueAt(failureRow,2)), true);
                this.trainSystem.getTrackControllerHandler().requestOpen(Global.Line.valueOf((String)failureTable.getValueAt(failureRow,0)), Integer.parseInt((String)failureTable.getValueAt(failureRow, 2)));
                this.trainSystem.getTrackControllerHandler().updateTrack(Global.Line.valueOf((String)failureTable.getValueAt(failureRow, 0)));
            }
            else{
                this.trainSystem.getTrackViewRed().setBlockStatus((Global.Line.valueOf((String)failureTable.getValueAt(failureRow,0))), (String)failureTable.getValueAt(failureRow,1), Integer.parseInt((String)failureTable.getValueAt(failureRow,2)), true);
                this.trainSystem.getTrackControllerHandler().requestOpen(Global.Line.valueOf((String)failureTable.getValueAt(failureRow,0)), Integer.parseInt((String)failureTable.getValueAt(failureRow, 2)));
                this.trainSystem.getTrackControllerHandler().updateTrack(Global.Line.valueOf((String)failureTable.getValueAt(failureRow, 0)));
            }
            
            removeFailureFromTable(failureTable.getValueAt(failureRow,2));
        }

    }//GEN-LAST:event_FailureTableMouseClicked
    
    /**
     * @author Robert Goldshear
     * @param blockID
     */
    private void removeFailureFromTable(Object blockID){
        int blockIDRow = 0;
        
        DefaultTableModel model = (DefaultTableModel)FailureTable.getModel();
        for(int i = 0; i < model.getRowCount(); i++){
            for(int j = 0; j < model.getColumnCount(); j++){
                if(model.getValueAt(i, j).equals(blockID)){
                    blockIDRow = i;
                }
            }
        }
        model.removeRow(blockIDRow);
        setOperational();
    }
    
    
    private void setOperational(){
        
        for ( int i = 0; i < TrainTable.getRowCount(); i ++){
            TrainTable.setValueAt(true, i, 3);
        }
        for ( int i = 0; i < BlockTable.getRowCount(); i ++){
            BlockTable.setValueAt(true, i, 3);
        }
    }
    
    private void DispatchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispatchButton1ActionPerformed

        String dispatchLine = (String) DispatchLineBox.getSelectedItem();
        String dispatchBlock = "A";
        int dispatchSection = 1;
        int dispatchSpeed = 0;
        int dispatchAuthority = 0;
        if (trainSystem.isInteger(DispatchSpeedField.getText())){
            dispatchSpeed = Integer.valueOf(DispatchSpeedField.getText());  
        }
        if (trainSystem.isInteger(DispatchAuthorityField.getText())){
            dispatchAuthority = Integer.valueOf(DispatchAuthorityField.getText());
        }
        int dispatchNumberCars = 1;
        if(this.trainSystem.getClock().getHour() >= 6 && this.trainSystem.getClock().getHour() <= 7){
            dispatchNumberCars = 2;
        }
        int dispatchID = iterativeID;

        Object[] newTrain = new Object[4];
        newTrain[0] = dispatchLine;
        newTrain[1] = dispatchID;
        newTrain[2] = (dispatchSection + ":" + dispatchBlock);
        newTrain[3] = true;

                
            if ((dispatchAuthority < 107000) & (dispatchSpeed < 44) & (trainSystem.isInteger(DispatchSpeedField.getText())) & (trainSystem.isInteger(DispatchAuthorityField.getText()))){
            dispatchNewTrain(dispatchSpeed, dispatchAuthority, dispatchNumberCars, dispatchLine, dispatchID);
            trainsDispatched++;
            }
            if ((dispatchAuthority >= 107000)){
            JOptionPane.showMessageDialog(null, "Unsafe Dispatch Command. Authoity Too High.", "Error",
                                    JOptionPane.ERROR_MESSAGE);   
            }
            if (dispatchSpeed >= 44){
            JOptionPane.showMessageDialog(null, "Unsafe Dispatch Command. Speed Too High.", "Error",
                                    JOptionPane.ERROR_MESSAGE);   
            }
       
        
    }//GEN-LAST:event_DispatchButton1ActionPerformed

    private void addRow(String dispatchLine, String dispatchBlock, int dispatchSection, int dispatchID) {
        String concatination = (dispatchBlock + ":" + Integer.toString(dispatchSection));
        Object[] newRow = new Object[4];
        newRow[0] = dispatchLine;
        newRow[1] = dispatchID;
        newRow[2] = concatination;
        newRow[3] = true;
        DefaultTableModel model = (DefaultTableModel) TrainTable.getModel();
        model.addRow(newRow);
    }
    
    private void DispatchAuthorityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispatchAuthorityFieldActionPerformed
    }//GEN-LAST:event_DispatchAuthorityFieldActionPerformed

    private void DispatchSpeedFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DispatchSpeedFieldMouseClicked
        DispatchSpeedField.setText("");      
    }//GEN-LAST:event_DispatchSpeedFieldMouseClicked

    private void DispatchAuthorityFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DispatchAuthorityFieldMouseClicked
        DispatchAuthorityField.setText("");      
    }//GEN-LAST:event_DispatchAuthorityFieldMouseClicked

    private void DispatchSpeedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DispatchSpeedFieldActionPerformed
 
    }//GEN-LAST:event_DispatchSpeedFieldActionPerformed

    private void redLineThroughputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redLineThroughputActionPerformed
    }//GEN-LAST:event_redLineThroughputActionPerformed

    private void TrainShutdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrainShutdownButtonActionPerformed
        TrainShutdownGUI trainShutdown = new TrainShutdownGUI(this, trainSystem);
        trainShutdown.setVisible(true);        
    }//GEN-LAST:event_TrainShutdownButtonActionPerformed

    private void InitializeGUIObject() {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdditionalInfoPanel2;
    private javax.swing.JTable BlockTable;
    private javax.swing.JTabbedPane BrowserPanel2;
    private javax.swing.JButton ChangeParametersButton3;
    private javax.swing.JTextField DispatchAuthorityField;
    private javax.swing.JButton DispatchButton1;
    private javax.swing.JPanel DispatchControlPanel;
    private javax.swing.JComboBox<String> DispatchLineBox;
    private javax.swing.JTextField DispatchSpeedField;
    private javax.swing.JTable FailureTable;
    private javax.swing.JComboBox<String> SelectOperationMode2;
    private javax.swing.JButton TrackShutdownButton;
    private javax.swing.JButton TrainShutdownButton;
    public javax.swing.JTable TrainTable;
    private javax.swing.JLabel greenLabel;
    private javax.swing.JTextField greenLineThroughput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel redLabel;
    private javax.swing.JTextField redLineThroughput;
    private javax.swing.JProgressBar rushHourProgressBar;
    // End of variables declaration//GEN-END:variables

    private int getNumberCars() {
        int dispatchNumberCars = 1;
        if(this.trainSystem.getClock().getHour() >= 6 && this.trainSystem.getClock().getHour() <= 7){
            dispatchNumberCars = 2;
        }
        return dispatchNumberCars;
    }

    /**
     * @author Robert Goldshear
     * @param totalDistanceTraveledFeet
     * @param line
     */
    public void incrementTrainsToYard(double totalDistanceTraveledFeet, String line) {
        if(Global.Line.valueOf(line) == Global.Line.GREEN){
            this.trainsPerHourGreen += Math.round(totalDistanceTraveledFeet / this.trainSystem.getTrackModel().getLine(Global.Line.valueOf(line)).getTotalLength());
        } else {
             this.trainsPerHourRed += Math.round(totalDistanceTraveledFeet / this.trainSystem.getTrackModel().getLine(Global.Line.valueOf(line)).getTotalLength());
        }
    }
}
