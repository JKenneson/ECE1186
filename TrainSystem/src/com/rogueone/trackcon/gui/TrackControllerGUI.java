/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rogueone.trackcon.gui;

import com.rogueone.global.Global;
import com.rogueone.global.Global.LogicGroups;
import com.rogueone.global.Global.SwitchState;
import com.rogueone.trackcon.TrackController;
import com.rogueone.trackcon.entities.LogicTrackGroup;
import com.rogueone.trackcon.entities.State;
import com.rogueone.trackcon.entities.StateSet;
import com.rogueone.trackcon.entities.Switch;
import com.rogueone.trackcon.entities.UserSwitchState;
import java.io.File;
import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

/**
 *
 * @author kylemonto
 */
public class TrackControllerGUI extends javax.swing.JPanel {

    TrackController trackController;
    private LogicTrackGroup selectedLogicTrackGroup;
    private int currentNumberOfSwitches;
    private int currentNumberOfPositions;

    /**
     * Creates new form TrackControllerGUI
     */
    public TrackControllerGUI() {
        initComponents();
    }

    public TrackControllerGUI(TrackController trackController) {
        initComponents();
        this.trackController = trackController;
        lineTextField.setText((String) currentTrackControllerComboBox.getSelectedItem());
        hideSimulatePanels();
        logicGroupsComboBox.setEnabled(true);
        crossingComboBox.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        leftTrackButtonGroup = new javax.swing.ButtonGroup();
        rightTrackButtonGroup = new javax.swing.ButtonGroup();
        position1TrainButtonGroup = new javax.swing.ButtonGroup();
        position2TrainButtonGroup = new javax.swing.ButtonGroup();
        position3TrainButtonGroup = new javax.swing.ButtonGroup();
        position4TrainButtonGroup = new javax.swing.ButtonGroup();
        crossingButtonGroup = new javax.swing.ButtonGroup();
        testSwitchOrCrossingButtonGroup = new javax.swing.ButtonGroup();
        trackControllerScrollPane = new javax.swing.JScrollPane();
        trackControllerPanel = new javax.swing.JPanel();
        trackControllerTabbedPane = new javax.swing.JTabbedPane();
        summaryPanel = new javax.swing.JPanel();
        selectionPanel = new javax.swing.JPanel();
        lineLabel = new javax.swing.JLabel();
        lineTextField = new javax.swing.JTextField();
        switchNumberLabel = new javax.swing.JLabel();
        switchNumberTextField = new javax.swing.JTextField();
        crossingNumberLabel = new javax.swing.JLabel();
        crossingNumberTextField = new javax.swing.JTextField();
        blockNumberLabel = new javax.swing.JLabel();
        blockNumberTextField = new javax.swing.JTextField();
        chooseFileButton = new javax.swing.JButton();
        plcProgramLabel = new javax.swing.JLabel();
        plcProgramTextField = new javax.swing.JTextField();
        trackSignalNumberTextField = new javax.swing.JTextField();
        trackSignalNumberLabel = new javax.swing.JLabel();
        speedAuthorityPanel = new javax.swing.JPanel();
        suggestSpeedLabel = new javax.swing.JLabel();
        suggestSpeedTextField = new javax.swing.JTextField();
        suggestAuthorityTextField = new javax.swing.JTextField();
        suggestAuthorityLabel = new javax.swing.JLabel();
        commandedSpeedLabel = new javax.swing.JLabel();
        commandedSpeedTextField = new javax.swing.JTextField();
        commandedAuthorityLabel = new javax.swing.JLabel();
        commandedAuthorityTextField = new javax.swing.JTextField();
        trainNumberLabel = new javax.swing.JLabel();
        trainNumberTextField = new javax.swing.JTextField();
        addTrain = new javax.swing.JButton();
        componentSummaryPanel = new javax.swing.JPanel();
        currentTrackControllerComboBox = new javax.swing.JComboBox<>();
        currentTrackControllerLabel = new javax.swing.JLabel();
        currentTrainsScrollPane = new javax.swing.JScrollPane();
        currentTrainsTable = new javax.swing.JTable();
        currentTrainLabel = new javax.swing.JLabel();
        currentSwitchesLabel = new javax.swing.JLabel();
        currentSwitchScrollPane = new javax.swing.JScrollPane();
        currentSwitchTable = new javax.swing.JTable();
        currentCrossingsLabel = new javax.swing.JLabel();
        currentCrossingsScrollPane = new javax.swing.JScrollPane();
        currentCrossingTable = new javax.swing.JTable();
        currentBlockLabel = new javax.swing.JLabel();
        currentBlockScrollPane = new javax.swing.JScrollPane();
        currentBlockTable = new javax.swing.JTable();
        currentTrackSignalLabel = new javax.swing.JLabel();
        currentTrackSignalsScrollPane = new javax.swing.JScrollPane();
        currentTrackSignalsTable = new javax.swing.JTable();
        simulatePanel = new javax.swing.JPanel();
        plcSysNotifPanel = new javax.swing.JPanel();
        systemOutputScrollPane = new javax.swing.JScrollPane();
        systemOutputTextArea = new javax.swing.JTextArea();
        imagePanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        inputsPanel = new javax.swing.JPanel();
        logicGroupPanel = new javax.swing.JPanel();
        logicGroupsComboBox = new javax.swing.JComboBox<>();
        logicGroupLabel = new javax.swing.JLabel();
        testSwitchRadioButton = new javax.swing.JRadioButton();
        testCrossingRadioButton = new javax.swing.JRadioButton();
        testSwitchOrCrossingLabel = new javax.swing.JLabel();
        selectCrossingLabel = new javax.swing.JLabel();
        crossingComboBox = new javax.swing.JComboBox<>();
        position1Panel = new javax.swing.JPanel();
        occupiedPosition1RadioButton = new javax.swing.JRadioButton();
        trainPosition1Label = new javax.swing.JLabel();
        unoccupiedPosition1RadioButton = new javax.swing.JRadioButton();
        trackStatusPosition1ComboBox = new javax.swing.JComboBox<>();
        trackPosition1Label = new javax.swing.JLabel();
        position2Panel = new javax.swing.JPanel();
        occupiedPosition2RadioButton = new javax.swing.JRadioButton();
        unoccupiedPosition2RadioButton = new javax.swing.JRadioButton();
        trainPosition2Label = new javax.swing.JLabel();
        trackPosition2Label = new javax.swing.JLabel();
        trackStatusPosition2ComboBox = new javax.swing.JComboBox<>();
        position3Panel = new javax.swing.JPanel();
        unoccupiedPosition3RadioButton = new javax.swing.JRadioButton();
        occupiedPosition3RadioButton = new javax.swing.JRadioButton();
        trainPosition3Label = new javax.swing.JLabel();
        trackPosition3Label = new javax.swing.JLabel();
        trackStatusPosition3ComboBox = new javax.swing.JComboBox<>();
        position4Panel = new javax.swing.JPanel();
        occupiedPosition4RadioButton = new javax.swing.JRadioButton();
        trainPosition4Label = new javax.swing.JLabel();
        unoccupiedPosition4RadioButton = new javax.swing.JRadioButton();
        trackStatusPosition4ComboBox = new javax.swing.JComboBox<>();
        trackPosition4Label = new javax.swing.JLabel();
        switch1Panel = new javax.swing.JPanel();
        switch1AlternateRadioButton = new javax.swing.JRadioButton();
        switch1DefaultRadioButton = new javax.swing.JRadioButton();
        switch1Label = new javax.swing.JLabel();
        switch2Panel = new javax.swing.JPanel();
        switch2DefaultRadioButton = new javax.swing.JRadioButton();
        switch2AlternateRadioButton = new javax.swing.JRadioButton();
        switch2Label = new javax.swing.JLabel();
        crossingPanel = new javax.swing.JPanel();
        crossingStatusLabel = new javax.swing.JLabel();
        crossingActiveRadioButton = new javax.swing.JRadioButton();
        crossingInactiveRadioButton = new javax.swing.JRadioButton();
        actionsPanel = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        simulateButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        trackControllerPanel.setPreferredSize(new java.awt.Dimension(1000, 700));
        trackControllerPanel.setLayout(new java.awt.BorderLayout());

        trackControllerTabbedPane.setPreferredSize(new java.awt.Dimension(866, 670));

        summaryPanel.setLayout(new java.awt.GridBagLayout());

        selectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selections"));
        selectionPanel.setLayout(new java.awt.GridBagLayout());

        lineLabel.setText("Line: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        selectionPanel.add(lineLabel, gridBagConstraints);

        lineTextField.setText("N/A");
        lineTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        selectionPanel.add(lineTextField, gridBagConstraints);

        switchNumberLabel.setText("Switch ID: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        selectionPanel.add(switchNumberLabel, gridBagConstraints);

        switchNumberTextField.setText("#/(None Selected)");
        switchNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchNumberTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        selectionPanel.add(switchNumberTextField, gridBagConstraints);

        crossingNumberLabel.setText("Crossing ID: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        selectionPanel.add(crossingNumberLabel, gridBagConstraints);

        crossingNumberTextField.setText("#/(None Selected)");
        crossingNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crossingNumberTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        selectionPanel.add(crossingNumberTextField, gridBagConstraints);

        blockNumberLabel.setText("Block ID: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        selectionPanel.add(blockNumberLabel, gridBagConstraints);

        blockNumberTextField.setText("#/(None Selected)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        selectionPanel.add(blockNumberTextField, gridBagConstraints);

        chooseFileButton.setText("Choose File");
        chooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        selectionPanel.add(chooseFileButton, gridBagConstraints);

        plcProgramLabel.setText("PLC Program:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        selectionPanel.add(plcProgramLabel, gridBagConstraints);

        plcProgramTextField.setText("No file selected");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        selectionPanel.add(plcProgramTextField, gridBagConstraints);

        trackSignalNumberTextField.setText("#/(None Selected)");
        trackSignalNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackSignalNumberTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        selectionPanel.add(trackSignalNumberTextField, gridBagConstraints);

        trackSignalNumberLabel.setText("Track Signal ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        selectionPanel.add(trackSignalNumberLabel, gridBagConstraints);

        speedAuthorityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Speed/Authority"));
        speedAuthorityPanel.setLayout(new java.awt.GridBagLayout());

        suggestSpeedLabel.setText("Suggested Speed(mph):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        speedAuthorityPanel.add(suggestSpeedLabel, gridBagConstraints);

        suggestSpeedTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggestSpeedTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        speedAuthorityPanel.add(suggestSpeedTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        speedAuthorityPanel.add(suggestAuthorityTextField, gridBagConstraints);

        suggestAuthorityLabel.setText("Suggested Authority(ft):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        speedAuthorityPanel.add(suggestAuthorityLabel, gridBagConstraints);

        commandedSpeedLabel.setText("Commanded Speed(mph):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        speedAuthorityPanel.add(commandedSpeedLabel, gridBagConstraints);

        commandedSpeedTextField.setEditable(false);
        commandedSpeedTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commandedSpeedTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        speedAuthorityPanel.add(commandedSpeedTextField, gridBagConstraints);

        commandedAuthorityLabel.setText("Commanded Authority(ft):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        speedAuthorityPanel.add(commandedAuthorityLabel, gridBagConstraints);

        commandedAuthorityTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        speedAuthorityPanel.add(commandedAuthorityTextField, gridBagConstraints);

        trainNumberLabel.setText("Train Number:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        speedAuthorityPanel.add(trainNumberLabel, gridBagConstraints);

        trainNumberTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainNumberTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 70;
        speedAuthorityPanel.add(trainNumberTextField, gridBagConstraints);

        addTrain.setText("Dispatch Train");
        addTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTrainActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        speedAuthorityPanel.add(addTrain, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        selectionPanel.add(speedAuthorityPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        summaryPanel.add(selectionPanel, gridBagConstraints);

        componentSummaryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Component Summary"));
        componentSummaryPanel.setPreferredSize(new java.awt.Dimension(500, 600));
        componentSummaryPanel.setLayout(new java.awt.GridBagLayout());

        currentTrackControllerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Green 1", "Green 2", "Red 1", "Red 2" }));
        currentTrackControllerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentTrackControllerComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        componentSummaryPanel.add(currentTrackControllerComboBox, gridBagConstraints);

        currentTrackControllerLabel.setText("Current Track Controller:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        componentSummaryPanel.add(currentTrackControllerLabel, gridBagConstraints);

        currentTrainsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Train ID", "Suggested Speed", "Suggested Authority", "Commanded Speed", "Commanded Authority"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentTrainsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentTrainsTableMouseClicked(evt);
            }
        });
        currentTrainsScrollPane.setViewportView(currentTrainsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        componentSummaryPanel.add(currentTrainsScrollPane, gridBagConstraints);

        currentTrainLabel.setText("Current Trains");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        componentSummaryPanel.add(currentTrainLabel, gridBagConstraints);

        currentSwitchesLabel.setText("Switches");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        componentSummaryPanel.add(currentSwitchesLabel, gridBagConstraints);

        currentSwitchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Section", "Block ID", "Switch ID", "State", "Connection"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentSwitchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentSwitchTableMouseClicked(evt);
            }
        });
        currentSwitchScrollPane.setViewportView(currentSwitchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        componentSummaryPanel.add(currentSwitchScrollPane, gridBagConstraints);

        currentCrossingsLabel.setText("Crossing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        componentSummaryPanel.add(currentCrossingsLabel, gridBagConstraints);

        currentCrossingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Section", "Block ID", "State"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentCrossingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentCrossingTableMouseClicked(evt);
            }
        });
        currentCrossingsScrollPane.setViewportView(currentCrossingTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        componentSummaryPanel.add(currentCrossingsScrollPane, gridBagConstraints);

        currentBlockLabel.setText("Block");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        componentSummaryPanel.add(currentBlockLabel, gridBagConstraints);

        currentBlockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Section", "BlockID", "Occupied", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentBlockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentBlockTableMouseClicked(evt);
            }
        });
        currentBlockScrollPane.setViewportView(currentBlockTable);
        if (currentBlockTable.getColumnModel().getColumnCount() > 0) {
            currentBlockTable.getColumnModel().getColumn(0).setResizable(false);
            currentBlockTable.getColumnModel().getColumn(1).setResizable(false);
            currentBlockTable.getColumnModel().getColumn(2).setResizable(false);
            currentBlockTable.getColumnModel().getColumn(3).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        componentSummaryPanel.add(currentBlockScrollPane, gridBagConstraints);

        currentTrackSignalLabel.setText("Track Signals");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        componentSummaryPanel.add(currentTrackSignalLabel, gridBagConstraints);

        currentTrackSignalsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Section", "Block ID", "Light State"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentTrackSignalsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentTrackSignalsTableMouseClicked(evt);
            }
        });
        currentTrackSignalsScrollPane.setViewportView(currentTrackSignalsTable);
        if (currentTrackSignalsTable.getColumnModel().getColumnCount() > 0) {
            currentTrackSignalsTable.getColumnModel().getColumn(0).setResizable(false);
            currentTrackSignalsTable.getColumnModel().getColumn(1).setResizable(false);
            currentTrackSignalsTable.getColumnModel().getColumn(2).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        componentSummaryPanel.add(currentTrackSignalsScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        summaryPanel.add(componentSummaryPanel, gridBagConstraints);

        trackControllerTabbedPane.addTab("Summary", summaryPanel);

        simulatePanel.setLayout(new java.awt.GridBagLayout());

        plcSysNotifPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("PLC and System Notifications"));
        plcSysNotifPanel.setLayout(new java.awt.GridBagLayout());

        systemOutputTextArea.setColumns(20);
        systemOutputTextArea.setRows(5);
        systemOutputTextArea.setText("System Output\n\n");
        systemOutputScrollPane.setViewportView(systemOutputTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        plcSysNotifPanel.add(systemOutputScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        simulatePanel.add(plcSysNotifPanel, gridBagConstraints);

        imagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Image"));
        imagePanel.setPreferredSize(new java.awt.Dimension(400, 315));

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rogueone/images/Wayside_img.png"))); // NOI18N
        imageLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        simulatePanel.add(imagePanel, gridBagConstraints);

        inputsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Inputs"));
        inputsPanel.setPreferredSize(new java.awt.Dimension(800, 400));
        inputsPanel.setLayout(new java.awt.GridBagLayout());

        logicGroupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Logic Group"));
        logicGroupPanel.setPreferredSize(new java.awt.Dimension(130, 70));
        logicGroupPanel.setLayout(new java.awt.GridBagLayout());

        logicGroupsComboBox.setModel(new DefaultComboBoxModel(Global.LogicGroups.values()));
        logicGroupsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logicGroupsComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        logicGroupPanel.add(logicGroupsComboBox, gridBagConstraints);

        logicGroupLabel.setText("Select Logic Group:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        logicGroupPanel.add(logicGroupLabel, gridBagConstraints);

        testSwitchOrCrossingButtonGroup.add(testSwitchRadioButton);
        testSwitchRadioButton.setSelected(true);
        testSwitchRadioButton.setText("Switch");
        testSwitchRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testSwitchRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        logicGroupPanel.add(testSwitchRadioButton, gridBagConstraints);

        testSwitchOrCrossingButtonGroup.add(testCrossingRadioButton);
        testCrossingRadioButton.setText("Crossing");
        testCrossingRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testCrossingRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        logicGroupPanel.add(testCrossingRadioButton, gridBagConstraints);

        testSwitchOrCrossingLabel.setText("Test Switch or Crossing");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        logicGroupPanel.add(testSwitchOrCrossingLabel, gridBagConstraints);

        selectCrossingLabel.setText("Select Crossing:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        logicGroupPanel.add(selectCrossingLabel, gridBagConstraints);

        crossingComboBox.setModel(new DefaultComboBoxModel(Global.LogicGroups.values()));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        logicGroupPanel.add(crossingComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        inputsPanel.add(logicGroupPanel, gridBagConstraints);

        position1Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Position 1"));
        position1Panel.setLayout(new java.awt.GridBagLayout());

        position1TrainButtonGroup.add(occupiedPosition1RadioButton);
        occupiedPosition1RadioButton.setText("Occupied");
        occupiedPosition1RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                occupiedPosition1RadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        position1Panel.add(occupiedPosition1RadioButton, gridBagConstraints);

        trainPosition1Label.setText("Train Presence");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        position1Panel.add(trainPosition1Label, gridBagConstraints);

        position1TrainButtonGroup.add(unoccupiedPosition1RadioButton);
        unoccupiedPosition1RadioButton.setSelected(true);
        unoccupiedPosition1RadioButton.setText("Unoccupied");
        unoccupiedPosition1RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unoccupiedPosition1RadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        position1Panel.add(unoccupiedPosition1RadioButton, gridBagConstraints);

        trackStatusPosition1ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Broken", "Disconnected" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        position1Panel.add(trackStatusPosition1ComboBox, gridBagConstraints);

        trackPosition1Label.setText("Track");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        position1Panel.add(trackPosition1Label, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        inputsPanel.add(position1Panel, gridBagConstraints);

        position2Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Position 2"));
        position2Panel.setLayout(new java.awt.GridBagLayout());

        position2TrainButtonGroup.add(occupiedPosition2RadioButton);
        occupiedPosition2RadioButton.setSelected(true);
        occupiedPosition2RadioButton.setText("Occupied");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        position2Panel.add(occupiedPosition2RadioButton, gridBagConstraints);

        position2TrainButtonGroup.add(unoccupiedPosition2RadioButton);
        unoccupiedPosition2RadioButton.setText("Unoccupied");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        position2Panel.add(unoccupiedPosition2RadioButton, gridBagConstraints);

        trainPosition2Label.setText("Train Presence");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        position2Panel.add(trainPosition2Label, gridBagConstraints);

        trackPosition2Label.setText("Track");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        position2Panel.add(trackPosition2Label, gridBagConstraints);

        trackStatusPosition2ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Broken", "Disconnected" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        position2Panel.add(trackStatusPosition2ComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        inputsPanel.add(position2Panel, gridBagConstraints);

        position3Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Position 3"));
        position3Panel.setLayout(new java.awt.GridBagLayout());

        position3TrainButtonGroup.add(unoccupiedPosition3RadioButton);
        unoccupiedPosition3RadioButton.setText("Unoccupied");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        position3Panel.add(unoccupiedPosition3RadioButton, gridBagConstraints);

        position3TrainButtonGroup.add(occupiedPosition3RadioButton);
        occupiedPosition3RadioButton.setText("Occupied");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        position3Panel.add(occupiedPosition3RadioButton, gridBagConstraints);

        trainPosition3Label.setText("Position 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        position3Panel.add(trainPosition3Label, gridBagConstraints);

        trackPosition3Label.setText("Track 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        position3Panel.add(trackPosition3Label, gridBagConstraints);

        trackStatusPosition3ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Broken", "Disconnected" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        position3Panel.add(trackStatusPosition3ComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        inputsPanel.add(position3Panel, gridBagConstraints);

        position4Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Position 4"));
        position4Panel.setLayout(new java.awt.GridBagLayout());

        position4TrainButtonGroup.add(occupiedPosition4RadioButton);
        occupiedPosition4RadioButton.setText("Occupied");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        position4Panel.add(occupiedPosition4RadioButton, gridBagConstraints);

        trainPosition4Label.setText("Position 4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        position4Panel.add(trainPosition4Label, gridBagConstraints);

        position4TrainButtonGroup.add(unoccupiedPosition4RadioButton);
        unoccupiedPosition4RadioButton.setText("Unoccupied");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        position4Panel.add(unoccupiedPosition4RadioButton, gridBagConstraints);

        trackStatusPosition4ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Broken", "Disconnected" }));
        trackStatusPosition4ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackStatusPosition4ComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        position4Panel.add(trackStatusPosition4ComboBox, gridBagConstraints);

        trackPosition4Label.setText("Track 4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        position4Panel.add(trackPosition4Label, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        inputsPanel.add(position4Panel, gridBagConstraints);

        switch1Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Switch"));
        switch1Panel.setLayout(new java.awt.GridBagLayout());

        leftTrackButtonGroup.add(switch1AlternateRadioButton);
        switch1AlternateRadioButton.setText("Alternate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        switch1Panel.add(switch1AlternateRadioButton, gridBagConstraints);

        leftTrackButtonGroup.add(switch1DefaultRadioButton);
        switch1DefaultRadioButton.setSelected(true);
        switch1DefaultRadioButton.setText("Default");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        switch1Panel.add(switch1DefaultRadioButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        switch1Panel.add(switch1Label, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        inputsPanel.add(switch1Panel, gridBagConstraints);

        switch2Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Switch"));
        switch2Panel.setLayout(new java.awt.GridBagLayout());

        rightTrackButtonGroup.add(switch2DefaultRadioButton);
        switch2DefaultRadioButton.setSelected(true);
        switch2DefaultRadioButton.setText("Default");
        switch2DefaultRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switch2DefaultRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        switch2Panel.add(switch2DefaultRadioButton, gridBagConstraints);

        rightTrackButtonGroup.add(switch2AlternateRadioButton);
        switch2AlternateRadioButton.setText("Alternate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        switch2Panel.add(switch2AlternateRadioButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        switch2Panel.add(switch2Label, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        inputsPanel.add(switch2Panel, gridBagConstraints);

        crossingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Crossing"));
        crossingPanel.setLayout(new java.awt.GridBagLayout());

        crossingStatusLabel.setText("Crossing Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        crossingPanel.add(crossingStatusLabel, gridBagConstraints);

        crossingButtonGroup.add(crossingActiveRadioButton);
        crossingActiveRadioButton.setText("Active");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        crossingPanel.add(crossingActiveRadioButton, gridBagConstraints);

        crossingButtonGroup.add(crossingInactiveRadioButton);
        crossingInactiveRadioButton.setText("Inactive");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        crossingPanel.add(crossingInactiveRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        inputsPanel.add(crossingPanel, gridBagConstraints);

        actionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Actions"));
        actionsPanel.setLayout(new java.awt.GridBagLayout());

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        actionsPanel.add(refreshButton, gridBagConstraints);

        simulateButton.setText("Simulate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        actionsPanel.add(simulateButton, gridBagConstraints);

        resetButton.setText("Reset");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        actionsPanel.add(resetButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        inputsPanel.add(actionsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        simulatePanel.add(inputsPanel, gridBagConstraints);

        trackControllerTabbedPane.addTab("Simulate", simulatePanel);

        trackControllerPanel.add(trackControllerTabbedPane, java.awt.BorderLayout.PAGE_START);

        trackControllerScrollPane.setViewportView(trackControllerPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(trackControllerScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void lineTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lineTextFieldActionPerformed

    private void trainNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainNumberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainNumberTextFieldActionPerformed

    private void switchNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchNumberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_switchNumberTextFieldActionPerformed

    private void crossingNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crossingNumberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_crossingNumberTextFieldActionPerformed

    private void trackSignalNumberTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackSignalNumberTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trackSignalNumberTextFieldActionPerformed

    private void occupiedPosition1RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_occupiedPosition1RadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_occupiedPosition1RadioButtonActionPerformed

    private void unoccupiedPosition1RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unoccupiedPosition1RadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unoccupiedPosition1RadioButtonActionPerformed

    private void trackStatusPosition4ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackStatusPosition4ComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trackStatusPosition4ComboBoxActionPerformed

    private void switch2DefaultRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switch2DefaultRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_switch2DefaultRadioButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        StateSet guiStateSet = this.generateStateSet();
        UserSwitchState uss = trackController.updateStateMapping(this.selectedLogicTrackGroup, guiStateSet, this);
        if(uss != null){
            LinkedList<SimpleEntry<Integer, SwitchState>> switches =  uss.getUserSwitchStates();
            Iterator switchIterator = switches.iterator();
            while(switchIterator.hasNext()){
                SimpleEntry<Integer, SwitchState> switchState = (SimpleEntry<Integer, SwitchState>) switchIterator.next();
                for(int i = 0; i < currentNumberOfSwitches; i++){
                    if(switchState.getKey() == Integer.parseInt(switch1Label.getText())){
                        if(switchState.getValue() == Global.SwitchState.DEFAULT){
                            switch1DefaultRadioButton.setSelected(true);
                        } else if(switchState.getValue() == Global.SwitchState.ALTERNATE){
                            switch1AlternateRadioButton.setSelected(true);
                        } else {
                            System.out.println("Something went wrong should not be here 0000");
                        }
                    }
                    if (currentNumberOfSwitches == 2) {
                        if (switchState.getKey() == Integer.parseInt(switch2Label.getText())) {
                            if (switchState.getValue() == Global.SwitchState.DEFAULT) {
                                switch2DefaultRadioButton.setSelected(true);
                            } else if (switchState.getValue() == Global.SwitchState.ALTERNATE) {
                                switch2AlternateRadioButton.setSelected(true);
                            } else {
                                System.out.println("Something went wrong should not be here 0001");
                            }
                        }
                    }
                }
            }
            systemOutputTextArea.append("Previous State " + this.selectedLogicTrackGroup.getPreviousTrackState().toString() + "\n");
            systemOutputTextArea.append("Current State " + this.selectedLogicTrackGroup.getCurrentTrackState().toString() + "\n");
        } else {
            System.out.println("The positions you picked did not return a result");
        }

//        if (switch2DefaultRadioButton.isSelected() && switch1DefaultRadioButton.isSelected()) {
//            imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rogueone/images/Wayside_img01.png"))); // NOI18N
//        } else if (switch2AlternateRadioButton.isSelected() && switch1AlternateRadioButton.isSelected()) {
//            imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rogueone/images/Wayside_img02.png"))); // NOI18N
//        } else {
//            imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rogueone/images/Wayside_img.png"))); // NOI18N
//        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileButtonActionPerformed
        JFileChooser plcFileChooser = new JFileChooser();
        int returnVal = plcFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File trackDataFile = plcFileChooser.getSelectedFile();
            trackController.loadPLC(trackDataFile);
            plcProgramTextField.setText(trackDataFile.getName());
        } else if (returnVal == JFileChooser.CANCEL_OPTION) {
            System.out.println("File access cancelled by user.");
            plcProgramTextField.setText("No file selected");
        }
    }//GEN-LAST:event_chooseFileButtonActionPerformed

    private void currentTrackControllerComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentTrackControllerComboBoxActionPerformed
        // TODO add your handling code here:
        trackController.updateSummaryTab(this);
        lineTextField.setText((String) currentTrackControllerComboBox.getSelectedItem());
    }//GEN-LAST:event_currentTrackControllerComboBoxActionPerformed

    private void currentSwitchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentSwitchTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = currentSwitchTable.getSelectedRow();
        if (selectedRow != -1) {
            String switchID = (String) currentSwitchTable.getValueAt(selectedRow, 2);
            switchNumberTextField.setText(switchID + "");
        } else {
            switchNumberTextField.setText("Nothing Selected");
        }
    }//GEN-LAST:event_currentSwitchTableMouseClicked

    private void currentBlockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentBlockTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = currentBlockTable.getSelectedRow();
        if (selectedRow != -1) {
            String blockID = (String) currentBlockTable.getValueAt(selectedRow, 1);
            blockNumberTextField.setText(blockID + "");
        } else {
            blockNumberTextField.setText("Nothing Selected");
        }
    }//GEN-LAST:event_currentBlockTableMouseClicked

    private void currentTrackSignalsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentTrackSignalsTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = currentTrackSignalsTable.getSelectedRow();
        if (selectedRow != -1) {
            String blockID = (String) currentTrackSignalsTable.getValueAt(selectedRow, 1);
            trackSignalNumberTextField.setText(blockID + "");
        } else {
            trackSignalNumberTextField.setText("Nothing Selected");
        }
    }//GEN-LAST:event_currentTrackSignalsTableMouseClicked

    private void currentCrossingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentCrossingTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = currentCrossingTable.getSelectedRow();
        if (selectedRow != -1) {
            String blockID = (String) currentCrossingTable.getValueAt(selectedRow, 1);
            crossingNumberTextField.setText(blockID + "");
        } else {
            trackSignalNumberTextField.setText("Nothing Selected");
        }
    }//GEN-LAST:event_currentCrossingTableMouseClicked

    private void logicGroupsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logicGroupsComboBoxActionPerformed
        // TODO add your handling code here:
        hideSimulatePanels();
        trackController.setupSimulateTab((Global.LogicGroups) logicGroupsComboBox.getSelectedItem(), this);
//        showSimulatePanels();
    }//GEN-LAST:event_logicGroupsComboBoxActionPerformed

    private void testSwitchRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testSwitchRadioButtonActionPerformed
        // TODO add your handling code here:
        if(testSwitchRadioButton.isSelected()){
            logicGroupsComboBox.setEnabled(true);
            crossingComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_testSwitchRadioButtonActionPerformed

    private void testCrossingRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testCrossingRadioButtonActionPerformed
        // TODO add your handling code here:
        if(testCrossingRadioButton.isSelected()){
            logicGroupsComboBox.setEnabled(false);
            crossingComboBox.setEnabled(true);
        }
    }//GEN-LAST:event_testCrossingRadioButtonActionPerformed

    private void suggestSpeedTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggestSpeedTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_suggestSpeedTextFieldActionPerformed

    private void commandedSpeedTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commandedSpeedTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_commandedSpeedTextFieldActionPerformed

    private void addTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTrainActionPerformed
        // TODO add your handling code here:
        trackController.addTrain( trainNumberTextField.getText(), suggestSpeedTextField.getText(), suggestAuthorityTextField.getText(), this);
    }//GEN-LAST:event_addTrainActionPerformed

    private void currentTrainsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentTrainsTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = currentTrainsTable.getSelectedRow();
        if (selectedRow != -1) {
            String trainID = (String) currentTrainsTable.getValueAt(selectedRow, 0);
            trainNumberTextField.setText(trainID + "");
            String sugSpeed = (String) currentTrainsTable.getValueAt(selectedRow, 1);
            suggestSpeedTextField.setText(sugSpeed + "");
            String sugAuthority = (String) currentTrainsTable.getValueAt(selectedRow, 2);
            suggestAuthorityTextField.setText(sugAuthority + "");
            String comSpeed = (String) currentTrainsTable.getValueAt(selectedRow, 3);
            commandedSpeedTextField.setText(comSpeed + "");
            String comAuthority = (String) currentTrainsTable.getValueAt(selectedRow, 4);
            commandedAuthorityTextField.setText(comAuthority + "");
        } else {
            trainNumberTextField.setText("Nothing Selected");
            suggestSpeedTextField.setText("");
            suggestAuthorityTextField.setText("");
            commandedSpeedTextField.setText("");
            commandedAuthorityTextField.setText("");
        }
    }//GEN-LAST:event_currentTrainsTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.JButton addTrain;
    private javax.swing.JLabel blockNumberLabel;
    private javax.swing.JTextField blockNumberTextField;
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JLabel commandedAuthorityLabel;
    private javax.swing.JTextField commandedAuthorityTextField;
    private javax.swing.JLabel commandedSpeedLabel;
    private javax.swing.JTextField commandedSpeedTextField;
    private javax.swing.JPanel componentSummaryPanel;
    private javax.swing.JRadioButton crossingActiveRadioButton;
    private javax.swing.ButtonGroup crossingButtonGroup;
    private javax.swing.JComboBox<String> crossingComboBox;
    private javax.swing.JRadioButton crossingInactiveRadioButton;
    private javax.swing.JLabel crossingNumberLabel;
    private javax.swing.JTextField crossingNumberTextField;
    private javax.swing.JPanel crossingPanel;
    private javax.swing.JLabel crossingStatusLabel;
    private javax.swing.JLabel currentBlockLabel;
    private javax.swing.JScrollPane currentBlockScrollPane;
    public javax.swing.JTable currentBlockTable;
    public javax.swing.JTable currentCrossingTable;
    private javax.swing.JLabel currentCrossingsLabel;
    private javax.swing.JScrollPane currentCrossingsScrollPane;
    private javax.swing.JScrollPane currentSwitchScrollPane;
    public javax.swing.JTable currentSwitchTable;
    private javax.swing.JLabel currentSwitchesLabel;
    public javax.swing.JComboBox<String> currentTrackControllerComboBox;
    private javax.swing.JLabel currentTrackControllerLabel;
    private javax.swing.JLabel currentTrackSignalLabel;
    private javax.swing.JScrollPane currentTrackSignalsScrollPane;
    public javax.swing.JTable currentTrackSignalsTable;
    private javax.swing.JLabel currentTrainLabel;
    private javax.swing.JScrollPane currentTrainsScrollPane;
    public javax.swing.JTable currentTrainsTable;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JPanel inputsPanel;
    private javax.swing.ButtonGroup leftTrackButtonGroup;
    private javax.swing.JLabel lineLabel;
    private javax.swing.JTextField lineTextField;
    private javax.swing.JLabel logicGroupLabel;
    private javax.swing.JPanel logicGroupPanel;
    private javax.swing.JComboBox<String> logicGroupsComboBox;
    private javax.swing.JRadioButton occupiedPosition1RadioButton;
    private javax.swing.JRadioButton occupiedPosition2RadioButton;
    private javax.swing.JRadioButton occupiedPosition3RadioButton;
    private javax.swing.JRadioButton occupiedPosition4RadioButton;
    private javax.swing.JLabel plcProgramLabel;
    public javax.swing.JTextField plcProgramTextField;
    private javax.swing.JPanel plcSysNotifPanel;
    private javax.swing.JPanel position1Panel;
    private javax.swing.ButtonGroup position1TrainButtonGroup;
    private javax.swing.JPanel position2Panel;
    private javax.swing.ButtonGroup position2TrainButtonGroup;
    private javax.swing.JPanel position3Panel;
    private javax.swing.ButtonGroup position3TrainButtonGroup;
    private javax.swing.JPanel position4Panel;
    private javax.swing.ButtonGroup position4TrainButtonGroup;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton resetButton;
    private javax.swing.ButtonGroup rightTrackButtonGroup;
    private javax.swing.JLabel selectCrossingLabel;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JButton simulateButton;
    private javax.swing.JPanel simulatePanel;
    private javax.swing.JPanel speedAuthorityPanel;
    private javax.swing.JLabel suggestAuthorityLabel;
    private javax.swing.JTextField suggestAuthorityTextField;
    private javax.swing.JLabel suggestSpeedLabel;
    private javax.swing.JTextField suggestSpeedTextField;
    private javax.swing.JPanel summaryPanel;
    private javax.swing.JRadioButton switch1AlternateRadioButton;
    private javax.swing.JRadioButton switch1DefaultRadioButton;
    private javax.swing.JLabel switch1Label;
    private javax.swing.JPanel switch1Panel;
    private javax.swing.JRadioButton switch2AlternateRadioButton;
    private javax.swing.JRadioButton switch2DefaultRadioButton;
    private javax.swing.JLabel switch2Label;
    private javax.swing.JPanel switch2Panel;
    private javax.swing.JLabel switchNumberLabel;
    private javax.swing.JTextField switchNumberTextField;
    private javax.swing.JScrollPane systemOutputScrollPane;
    private javax.swing.JTextArea systemOutputTextArea;
    private javax.swing.JRadioButton testCrossingRadioButton;
    private javax.swing.ButtonGroup testSwitchOrCrossingButtonGroup;
    private javax.swing.JLabel testSwitchOrCrossingLabel;
    private javax.swing.JRadioButton testSwitchRadioButton;
    private javax.swing.JPanel trackControllerPanel;
    private javax.swing.JScrollPane trackControllerScrollPane;
    private javax.swing.JTabbedPane trackControllerTabbedPane;
    private javax.swing.JLabel trackPosition1Label;
    private javax.swing.JLabel trackPosition2Label;
    private javax.swing.JLabel trackPosition3Label;
    private javax.swing.JLabel trackPosition4Label;
    private javax.swing.JLabel trackSignalNumberLabel;
    private javax.swing.JTextField trackSignalNumberTextField;
    private javax.swing.JComboBox<String> trackStatusPosition1ComboBox;
    private javax.swing.JComboBox<String> trackStatusPosition2ComboBox;
    private javax.swing.JComboBox<String> trackStatusPosition3ComboBox;
    private javax.swing.JComboBox<String> trackStatusPosition4ComboBox;
    private javax.swing.JLabel trainNumberLabel;
    private javax.swing.JTextField trainNumberTextField;
    private javax.swing.JLabel trainPosition1Label;
    private javax.swing.JLabel trainPosition2Label;
    private javax.swing.JLabel trainPosition3Label;
    private javax.swing.JLabel trainPosition4Label;
    private javax.swing.JRadioButton unoccupiedPosition1RadioButton;
    private javax.swing.JRadioButton unoccupiedPosition2RadioButton;
    private javax.swing.JRadioButton unoccupiedPosition3RadioButton;
    private javax.swing.JRadioButton unoccupiedPosition4RadioButton;
    // End of variables declaration//GEN-END:variables

    private void resetSelectionsTextFields() {
        trainNumberTextField.setText("Nothing Selected");
        switchNumberTextField.setText("Nothing Selected");
        blockNumberTextField.setText("Nothing Selected");
        trackSignalNumberTextField.setText("Nothing Selected");
        crossingNumberTextField.setText("Nothing Selected");
    }

    private void hideSimulatePanels() {
        switch1Panel.setVisible(false);
        switch2Panel.setVisible(false);
        position1Panel.setVisible(false);
        position2Panel.setVisible(false);
        position3Panel.setVisible(false);
        position4Panel.setVisible(false);
        crossingPanel.setVisible(false);
    }

    private void showSimulatePanels() {
        switch1Panel.setVisible(true);
        switch2Panel.setVisible(true);
        position1Panel.setVisible(true);
        position2Panel.setVisible(true);
        position3Panel.setVisible(true);
        position4Panel.setVisible(true);
        crossingPanel.setVisible(true);
    }

    public void enableInputs(LogicTrackGroup selectedLogicGroup) {
        this.selectedLogicTrackGroup = selectedLogicGroup;
        //setup for switch panels
        ArrayList<Switch> selectedGroupSwitches = selectedLogicGroup.getSwitches();
        this.currentNumberOfSwitches = selectedGroupSwitches.size();
        if (selectedGroupSwitches.size() >= 1 ) {
            switch1Panel.setVisible(true);
            switch1Label.setText(selectedGroupSwitches.get(0).getSwitchID() + "");
            if (selectedGroupSwitches.get(0).getSwitchState().getSwitchState() == Global.SwitchState.DEFAULT) {
                switch1DefaultRadioButton.setEnabled(true);
            } else {
                switch1AlternateRadioButton.setEnabled(true);
            }
            switch2Panel.setVisible(false);
        }
        if (selectedGroupSwitches.size() >= 2 ) {
            switch2Panel.setVisible(true);
            switch2Label.setText(selectedGroupSwitches.get(1).getSwitchID() + "");
            if (selectedGroupSwitches.get(1).getSwitchState().getSwitchState() == Global.SwitchState.DEFAULT) {
                switch2DefaultRadioButton.setSelected(true);
            } else {
                switch2AlternateRadioButton.setSelected(true);
            }
        }
        //setup for position panels
        Set<State> states = selectedLogicGroup.getCurrentTrackState().getSet();
        Object[] objArray = states.toArray();
        currentNumberOfPositions = objArray.length;
        State[] statesArray = new State[objArray.length];
        int i = 0;
        for (Object o : objArray) {
            statesArray[i++] = (State) o;
        }
        if (states.size() >= 1) {
            position1Panel.setVisible(true);
            trainPosition1Label.setText(statesArray[0].getGroup() + "");
            if (statesArray[0].getPresence() == Global.Presence.UNOCCUPIED) {
                unoccupiedPosition1RadioButton.setSelected(true);
            } else {
                occupiedPosition1RadioButton.setSelected(true);
            }
            position2Panel.setVisible(false);
            position3Panel.setVisible(false);
            position4Panel.setVisible(false);
        }
        if (states.size() >= 2) {
            position2Panel.setVisible(true);
            trainPosition2Label.setText(statesArray[1].getGroup() + "");
            if (statesArray[1].getPresence() == Global.Presence.UNOCCUPIED) {
                unoccupiedPosition2RadioButton.setSelected(true);
            } else {
                occupiedPosition2RadioButton.setSelected(true);
            }
            position3Panel.setVisible(false);
            position4Panel.setVisible(false);
        }
        if (states.size() >= 3 ) {
            position3Panel.setVisible(true);
            trainPosition3Label.setText(statesArray[2].getGroup() + "");
            if (statesArray[2].getPresence() == Global.Presence.UNOCCUPIED) {
                unoccupiedPosition3RadioButton.setSelected(true);
            } else {
                occupiedPosition3RadioButton.setSelected(true);
            }
            position4Panel.setVisible(false);
        }
        if (states.size() >= 4 ) {
            position4Panel.setVisible(true);
            trainPosition4Label.setText(statesArray[3].getGroup() + "");
            if (statesArray[3].getPresence() == Global.Presence.UNOCCUPIED) {
                unoccupiedPosition4RadioButton.setSelected(true);
            } else {
                occupiedPosition4RadioButton.setSelected(true);
            }
        }
    }

    private StateSet generateStateSet() {
        StateSet guiStateSet = new StateSet();
        State pos1 = null;
        if(position1Panel.isVisible()){
            Global.TrackGroups pos1TrackGroup = Global.TrackGroups.valueOf(trainPosition1Label.getText());
            Global.Presence position1Presence = null;
            if(occupiedPosition1RadioButton.isSelected()){
                position1Presence = Global.Presence.OCCUPIED;
            } else if (unoccupiedPosition1RadioButton.isSelected()){
                position1Presence = Global.Presence.UNOCCUPIED;
            } else {
                System.out.println("A Position must be choosen!");
            }
            pos1 = new State(pos1TrackGroup, position1Presence);
        }
        State pos2 = null;
        if(position2Panel.isVisible()){
            Global.TrackGroups pos2TrackGroup = Global.TrackGroups.valueOf(trainPosition2Label.getText());
            Global.Presence position2Presence = null;
            if(occupiedPosition2RadioButton.isSelected()){
                position2Presence = Global.Presence.OCCUPIED;
            } else if (unoccupiedPosition2RadioButton.isSelected()){
                position2Presence = Global.Presence.UNOCCUPIED;
            } else {
                System.out.println("A Position must be choosen!");
            }
            pos2 = new State(pos2TrackGroup, position2Presence);
        }
        State pos3 = null;
        if(position3Panel.isVisible()){
            Global.TrackGroups pos3TrackGroup = Global.TrackGroups.valueOf(trainPosition3Label.getText());
            Global.Presence position3Presence = null;
            if(occupiedPosition3RadioButton.isSelected()){
                position3Presence = Global.Presence.OCCUPIED;
            } else if (unoccupiedPosition3RadioButton.isSelected()){
                position3Presence = Global.Presence.UNOCCUPIED;
            } else {
                System.out.println("A Position must be choosen!");
            }
            pos3 = new State(pos3TrackGroup, position3Presence);
        }
        State pos4 = null;
        if(position4Panel.isVisible()){
            Global.TrackGroups pos4TrackGroup = Global.TrackGroups.valueOf(trainPosition4Label.getText());
            Global.Presence position4Presence = null;
            if(occupiedPosition4RadioButton.isSelected()){
                position4Presence = Global.Presence.OCCUPIED;
            } else if (unoccupiedPosition4RadioButton.isSelected()){
                position4Presence = Global.Presence.UNOCCUPIED;
            } else {
                System.out.println("A Position must be choosen!");
            }
            pos4 = new State(pos4TrackGroup, position4Presence);
        }
        if(currentNumberOfPositions >= 2){
            guiStateSet.addState(pos1);
            guiStateSet.addState(pos2);
        } 
        if(currentNumberOfPositions >= 3){
            guiStateSet.addState(pos3);
        }
        if(currentNumberOfPositions >= 4){
            guiStateSet.addState(pos4);
        }
        return guiStateSet;
    }

    public LogicTrackGroup getSelectedLogicTrackGroup() {
        return selectedLogicTrackGroup;
    }

    public void setSelectedLogicTrackGroup(LogicTrackGroup selectedLogicTrackGroup) {
        this.selectedLogicTrackGroup = selectedLogicTrackGroup;
    }

    public void setImage(LogicGroups logicGroup) {
        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/rogueone/images/" + logicGroup.toString() + ".png"))); // NOI18N
    }
    
    
}
